;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       GLOBALS
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

; ::: Flags :::
version 6.0
use_pngs 1
tcp_showborders 0
mcp_showborders 0
transport_showborders 0
no_meter_reclbl 1
tcp_vupeakwidth 1
tinttcp 446
mcp_mastervupeakheight 1
use_overlays 1

; ::: MCP :::
mcp_voltext_flags 5 3
mcp_vupeakheight 1
mcp_master_voltext_flags 1 0
mcp_altmeterpos 0
mcp_min_height 0

; ::: TCP :::
tcp_voltext_flags 5 3
tcp_master_voltext_flags 5 3
peaksedges 0

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       PARAMETERS
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
    
    adjuster_script "Default_6.0_theme_adjuster.lua"
    
    define_parameter paRt 'paRt' 1

    ; ::: MCP :::
    define_parameter mcp_width 'MCP Width / Layout' 1 0 5
    define_parameter mcp_allfader 'MCP All-Faders Mode      Off | T | M | T+M' 0 0 3
    define_parameter faders_horz 'MCP Faders Horizontal    Off | T | M | T+M' 0 0 3
    define_parameter mcp_fadersplit 'MCP Fader Split' 50 0 100
    define_parameter mcp_fadersplit_mst 'MCP Master Fader Split' 50 0 100
    define_parameter mcp_sidebar_embed 'MCP Sidebar on FX Embed' 0 0 100
    define_parameter mcp_fx_space 'MCP FX Panel              Off | Side | Dynamic' 10 0 200
    define_parameter mcp_mst_fx_space 'MCP Master FX Panel   Off | Side | Dynamic' 10 0 200


    ; ::: TCP :::
    define_parameter autohide_tcp 'TCP Layout     Full | Trim with Mixer | Trimmed' 0 0 2
    ;define_parameter link_folder_hide 'Sync TCP Element Visibility' 0 0 1
    set link_folder_hide 1 ; folder hide sync always on

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       ENVIRONMENTAL VARIABLES
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
    
    ; [!]
    ; Commented out Arrays represent alternate scaling numbers
    ; [1 | 1.25 | 1.5 | 1.75 | 2 | 2.5 | 3 | 3.5]

    ;-----------------
    ;   Unit

    set unit [1 1 1 1 2 2 2 3] ;[1 1 1 1 2 2 3 3]
    
    set unit.neg * unit -1
    
    ; ::: 1-10 :::
        set unit.1 unit
        set unit.2 * unit 2
        set unit.3 * unit 3
        set unit.4 * unit 4
        set unit.5 * unit 5
        set unit.6 * unit 6
        set unit.7 * unit 7
        set unit.8 * unit 8
        set unit.9 * unit 9
        set unit.10 * unit 10
    
    ; ::: 1-10 (negative) :::
        set unit.1.neg * unit.1 -1
        set unit.2.neg * unit.2 -1
        set unit.3.neg * unit.3 -1
        set unit.4.neg * unit.4 -1
        set unit.5.neg * unit.5 -1
        set unit.6.neg * unit.6 -1
        set unit.7.neg * unit.7 -1
        set unit.8.neg * unit.8 -1
        set unit.9.neg * unit.9 -1
        set unit.10.neg * unit.10 -1
    
    ;-----------------
    ;   Pad
        
        set pad [2 3 4 5 6 6 7 9 ;[2 3 4 5 6 7 9 10]
        set pad.neg * pad -1

    ; ::: 1-10 :::
        set pad.1 pad
        set pad.2 * pad 2
        set pad.3 * pad 3
        set pad.4 * pad 4
        set pad.5 * pad 5
        set pad.6 * pad 6
        set pad.7 * pad 7
        set pad.8 * pad 8
        set pad.9 * pad 9
        set pad.10 * pad 10

    ; ::: 1-10 (negative) :::
        set pad.1.neg * pad.1 -1
        set pad.2.neg * pad.2 -1
        set pad.3.neg * pad.3 -1
        set pad.4.neg * pad.4 -1
        set pad.5.neg * pad.5 -1
        set pad.6.neg * pad.6 -1
        set pad.7.neg * pad.7 -1
        set pad.8.neg * pad.8 -1
        set pad.9.neg * pad.9 -1
        set pad.10.neg * pad.10 -1
    
    ;--------------------
    ;   Pad (Transport)
        
        set trans.pad pad

    ; ::: 1-10 :::
        set trans.pad.1 * trans.pad 1
        set trans.pad.2 * trans.pad 2
        set trans.pad.3 * trans.pad 3
        set trans.pad.4 * trans.pad 4
        set trans.pad.5 * trans.pad 5
        set trans.pad.6 * trans.pad 6
        set trans.pad.7 * trans.pad 7
        set trans.pad.8 * trans.pad 8
        set trans.pad.9 * trans.pad 9
        set trans.pad.10 * trans.pad 10

    ; ::: 1-10 (negative) :::
        set trans.pad.1.neg * -1
        set trans.pad.2.neg * -1
        set trans.pad.3.neg * -1
        set trans.pad.4.neg * -1
        set trans.pad.5.neg * -1
        set trans.pad.6.neg * -1
        set trans.pad.7.neg * -1
        set trans.pad.8.neg * -1
        set trans.pad.9.neg * -1
        set trans.pad.10.neg * -1
    
    ;---------------------
    ;   Folder Padding
        
        set folder.padding 4
    
    ;---------------------
    ;   Space (Transport)
        
        set trans.space [10 13 15 18 20 22 23 30] ;[10 13 15 18 20 23 30 35]
        set trans.space.neg * trans.space -1
    
    ;---------------------------------------
    ;   Section: Envcp
        
        set envcp.min.val [15 18 23 26 30 34 38 45] ;[15 18 23 26 30 38 45 53]
        
        set pad.envcp.l [18 23 26 32 36 41 45 54] ;[18 23 26 32 36 45 54 63]
        set pad.envcp.r [3 3 4 4 6 8 8 9] ;[3 3 4 4 6 8 9 10]
        set pad.envcp.t [2 2 3 3 4 2 5 6] ;[2 2 3 3 4 5 6 7]
        set pad.envcp.b [2 2 3 3 4 5 5 6] ;[2 2 3 3 4 5 6 7]
    
    ;---------------------------------------
    ;   Section: TCP
        
        set tpc.min.val [15 18 23 26 30 34 38 45] ;[15 18 23 26 30 38 45 53]
        
        set pad.tcp.l [2 3 3 3 4 5 5 6] ;[2 3 3 3 4 5 6 8]
        set pad.tcp.r [23 29 35 41 48 54 60 72] ;[23 29 35 41 48 60 72 83]
        set pad.tcp.t [2 2 3 3 4 4 5 6] ;[2 2 3 3 4 5 6 7]
        set pad.tcp.b [2 4 4 4 6 7 7 8] ;[2 4 4 4 6 7 8 10]
        
        set pad.tcp.meter_w [11 13 16 20 23 27 30 34] ;[11 13 16 20 23 30 34 40]
        
        set pad.tcp.fcomp_pad [20 25 30 36 41 47 53 61] ;[20 25 30 36 41 53 61 72]
        set pad.tcp.fcomp_w [10 13 15 18 20 23 25 30] ;[10 13 15 18 20 25 30 35]
        set pad.tcp.folder_h [10 13 15 18 20 23 25 30] ;[10 13 15 18 20 25 30 35]
    
    ;---------------------------------------
    ;   Section: Master TCP
        
        set pad.tcp.mst.l [3 4 4 5 6 7 7 9] ;[3 4 4 5 6 7 9 10]
        set pad.tcp.mst.r [23 29 35 41 48 54 60 72] ;[23 29 35 41 48 60 72 83]
        set pad.tcp.mst.t [3 4 4 5 6 7 7 9] ;[3 4 4 5 6 7 9 10]
        set pad.tcp.mst.b [2 4 4 4 6 7 7 8] ;[2 4 4 4 6 7 8 10]
    
    ;---------------------------------------
    ;   Section: MCP
    
        set pad.mcp.l [4 5 5 5 8 9 10 12] ;[4 5 5 5 8 10 12 14]
        set pad.mcp.r [4 5 5 5 8 9 10 12] ;[4 5 5 5 8 10 12 14]
        set pad.mcp.t [4 5 5 5 8 9 10 12] ;[4 5 5 5 8 10 12 14]
        set pad.mcp.b [5 6 7 8 10 11 12 15] ;[5 6 7 8 10 12 15 17]
        set pad.mcp.fader_max_h [20 25 30 35 40 45 50 60] ;[20 25 30 35 40 50 60 70]
    
        set mcp.min_height [45 36 30 26 23 20 18 15]    

    ;---------------------------------------
    ;   Section:  Master MCP
    
        set pad.mcp.mst.l [4 6 6 6 8 9 10 12] ;[4 6 6 6 8 10 12 14]
        set pad.mcp.mst.r [4 6 6 6 8 9 10 12] ;[4 6 6 6 8 10 12 14]
        set pad.mcp.mst.t [4 6 6 6 8 9 10 12] ;[4 6 6 6 8 10 12 14]
        set pad.mcp.mst.b [18 24 26 29 36 40 44 54] ;[18 24 26 29 36 44 54 62]
    
    ;---------------------------------------
    ;   Section: Transport    
        
        set trans.docksize [25 32 38 43 50 56 63 75] ;[25 32 38 43 50 63 75 88]
        
        set pad.trans.l [3 4 5 5 6 7 8 9] ;[3 4 5 5 6 8 9 11]
        set pad.trans.r [3 4 5 5 6 7 8 9] ;[3 4 5 5 6 8 9 11]
        set pad.trans.t [3 4 5 5 6 7 8 9] ;[3 4 5 5 6 8 9 11]
        set pad.trans.b [1 2 2 2 2 2 2 3] ;[1 2 2 2 2 2 3 3]
        set pad.trans.space [10 13 15 18 20 23 25 30] ;[10 13 15 18 20 25 30 35]
        set pad.trans.center_off.0 [173 208 260 303 346 476 433 519] ;[173 208 260 303 346 433 519 606]
        set pad.trans.center_off.1 [153 183 230 268 306 345 383 459] ;[153 183 230 268 306 383 459 546]
        set pad.trans.logo [0 0 0 0 0 0 0 0] ;[32 40 48 56 64 72 80 96]     ;[32 40 48 56 64 64 80 96]    
        set pad.trans.bpm_add [32 40 48 56 64 72 80 96] ;[32 40 48 56 64 80 96 112]
        set pad.trans.rate_add [42 52 63 73 84 94 105 126] ;[32 40 48 56 64 80 96 112]
    
    ;-----------------
    ;   Border
        
        set border [1 1 1 1 2 2 2 3] ;[1 1 1 1 2 2 3 3]
        set border.neg * border -1
    
    ;-----------------
    ;   FX List
        
        set list.bar [4 5 6 7 8 9 10 12] ;[4 5 6 7 8 10 12 14]
        set list.bar.gap [2 2 2 2 2 2 2 2] ;[2 2 2 2 2 2 2 2]
        set list.col.gap pad
    
    ;-----------------
    ;   Label
        
        ;::: Volume :::
            set volume_set.h [9 11 14 16 18 21 23 27] ;[9 11 14 16 18 23 27 32]
            set volume_set.h.neg * volume_set.h -1
        
        ;::: Index :::
            set index.tcp.w [24 30 36 42 48 54 60 72] ;[24 30 36 42 48 60 72 84]
            set index.h [8 10 12 14 16 18 20 24] ;[8 10 12 14 16 20 24 28]
            set index.h.neg * index.h -1
        
        ;::: Padding :::
            set label.pad [1 1 1 1 2 2 2 3] ;[1 1 1 1 2 2 3 3]
            set label.pad.neg [-2 -2 -2 -2 -4 -4 -4 -6 ] ;[-2 -2 -2 -2 -4 -4 -6 -6]
    ;-----------------
    ;   Button
        
        ;::: Default :::
            set button.w [18 23 27 32 36 41 45 54] ;[18 23 27 32 36 45 54 63]
            set button.h [14 18 21 25 28 32 35 42] ;[14 18 21 25 28 35 42 49]
            set button.w.neg * button.w -1
            set button.h.neg * button.h -1
        
        ;::: ENVCP :::
            set envcp.button.w button.w
            set envcp.button.h [10 13 15 18 20 23 25 30] ; [10 13 15 18 20 25 30 35]
            set envcp.button.w.neg * envp.button.w -1
            set envcp.button.h.neg * envp.button.h -1
        
        ;::: Transport :::
            set trans.button.w [34 43 51 60 68 77 85 102] ;[34 43 51 60 68 85 102 119]
            set trans.button.h [18 23 27 32 36 41 45 54] ;[18 23 27 32 36 45 54 63]
            set trans.button.w.neg * set trans.button.w -1
            set trans.button.h.neg * set trans.button.h -1
    
    ;-----------------
    ;   Knob
        
        ;::: MCP :::
            set mcp.knob [18 23 27 32 36 41 45 54] ;[18 23 27 32 36 45 54 63]
            set mcp.knob.neg * mcp.knob -1
        
        ; ::: TCP :::
            set tcp.knob [14 18 21 25 28 32 35 42] ;[14 18 21 25 28 35 42 49]
            set tcp.knob.neg * tcp.knob -1
    
    ;-----------------
    ;   Fader
        
        ;::: MCP :::
            set mcp.fader button.w
        
        ;::: MCP - Slim :::
            set mcp.fader.slim mcp.fader
            set mcp.fader.padding [2 1 3 4 6 7 8 8] ;[2 1 3 4 6 8 8 8]
        
        ;::: ENVCP :::
            set envcp.fader.h mcp.fader
    
    ;-----------------
    ;   Font - Face
        
        set font.face [1 3 5 7 9 11 13 15] ;[1 3 5 7 9 11 13 15]
        set font.face.slim [2 4 6 8 10 12 14 16] ;[2 4 6 8 10 12 14 16]
    
        
    
    ;-----------------
    ;   Font - Margin
        
        ;::: Label :::
            set font.margin.label.l [2 2 2 3 4 4 4 6] ;[2 2 2 3 4 4 6 8]
            set font.margin.label.t [-1 -2 -2 -2 -3 -2 -2 -2 ] ;[-1 -2 -2 -2 -3 -2 -2 -2]
            set font.margin.label.r [2 2 2 3 4 4 4 6] ;[2 2 2 3 4 4 6 8]
            set font.margin.label.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Label (Offset - Folder First) :::
            set font.margin.offset.folder [8 10 12 14 16 18 20 24] ;[8 10 12 14 16 20 24 28]
            
        ;::: Label - Slim :::
            set font.margin.label.slim.l [2 2 3 2 4 5 6 6] ;[2 2 3 2 4 6 6 8]
            set font.margin.label.slim.t [-2 -1 -2 -2 -1 -1 -1 ] ;[-2 -2 -2 -2 -1 -1 -1]
            set font.margin.label.slim.r [2 2 3 2 4 5 6 6] ;[2 2 3 2 4 6 6 8]
            set font.margin.label.slim.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Label - Envcp :::
            set font.margin.envcp.l [2 3 2 3 4 5 6 6] ;[2 3 2 3 4 6 6 8]
            set font.margin.envcp.t [-2 -1 -1 -3 -1 -2 -1 -1 ] ;[-2 -2 -1 -3 -1 -2 -1 -1]
            set font.margin.envcp.r [2 3 3 3 4 5 6 6] ;[2 3 3 3 4 6 6 8]
            set font.margin.envcp.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Transport - MCP Track Index :::
            set font.margin.index.t [10 14 16 20 22 26 28 34] ;[10 14 16 20 22 28 34 42]
        
        ;::: FX List :::
            set font.margin.fxlist.l [2 2 2 2 4 4 4 6] ;[2 2 2 2 4 4 6 6]
            set font.margin.fxlist.r [2 2 2 2 4 4 4 6] ;[2 2 2 2 4 4 6 6]
        
        ;::: Transport - Tap :::
            set font.margin.tap.l [4 4 6 6 6 6 6 6] ;[4 4 6 6 6 6 6 6]
            set font.margin.tap.t [1 1 2 2 2 2 2 2] ;[1 1 2 2 2 2 2 2]
            set font.margin.tap.r [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
            set font.margin.tap.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Transport - BPM Edit :::
            set font.margin.bpm.l [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
            set font.margin.bpm.t [2 1 2 2 2 2 2 2] ;[2 1 2 2 2 2 2 2]
            set font.margin.bpm.r [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
            set font.margin.bpm.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Transport - Rate :::
            set font.margin.rate.l [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
            set font.margin.rate.t [2 1 2 2 2 2 2 2] ;[2 1 2 2 2 2 2 2]
            set font.margin.rate.r [2 4 4 4 6 6 6 8] ;[2 4 4 4 6 6 8 8]
            set font.margin.rate.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Transport - Selection :::
            set font.margin.select.l [10 12 15 18 20 23 25 30] ;[10 12 15 18 20 25 30 35]
            set font.margin.select.t [2 1 2 2 2 2 2 2] ;[2 1 2 2 2 2 2 2]
            set font.margin.select.r [10 12 15 18 20 23 25 30] ;[10 12 15 18 20 25 30 35]
            set font.margin.select.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
        
        ;::: Transport - Status :::
            set font.margin.status.l [10 12 15 18 20 23 25 30] ;[10 12 15 18 20 25 30 35]
            set font.margin.status.t [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
            set font.margin.status.r [10 12 15 18 20 23 25 30] ;[10 12 15 18 20 25 30 35]
            set font.margin.status.b [0 0 0 0 0 0 0 0] ;[0 0 0 0 0 0 0 0]
    
    
    
    ;-----------------
    ;   FX List
        
        ; ::: Height :::
            set fxlist.h button.h
        
        ; ::: TCP Width :::
            set tcp.fxparm.w_max [52 65 80 90 100 125 150 200] ;[52 65 80 90 100 150 200 250]
            set tcp.fxparm.w_min tcp.fxparm.w_max
    
    ;-----------------
    ;   Meter
    ;-----------------
        
        ; ::: VU Division :::
            set meter.div [1 1 1 1 2 2 2 3] ;[1 1 1 1 2 2 3 3]
            set meter.rms.div [1 1 1 1 2 2 2 3] ;[1 1 1 1 2 2 3 3]
        
        ; ::: Padding :::
            set meter.pad [1 1 1 1 2 2 2 3] ;[1 1 1 1 2 2 3 3]
            set meter.pad.neg [-2 -2 -2 -2 -4 -4 -4 -6] ;[-2 -2 -2 -2 -4 -4 -6 -6]
    
    ;------------------------
    ;   TCP Element Hiding
    ;------------------------
        
        ; ::: Units :::
            set hide_base 130
            set hide_unit 20
        
        ; ::: Steps :::
            set tcp.hide_step.4.n + hide_base * hide_unit -4
            set tcp.hide_step.3.n + hide_base * hide_unit -3
            set tcp.hide_step.2.n + hide_base * hide_unit -2
            set tcp.hide_step.1.n + hide_base * hide_unit -1
            set tcp.hide_step.0 + hide_base * hide_unit 0
            set tcp.hide_step.1 + hide_base * hide_unit 1
            set tcp.hide_step.2 + hide_base * hide_unit 2
            set tcp.hide_step.3 + hide_base * hide_unit 3
            set tcp.hide_step.4 + hide_base * hide_unit 4
            set tcp.hide_step.5 + hide_base * hide_unit 5
            set tcp.hide_step.6 + hide_base * hide_unit 6
            set tcp.hide_step.7 + hide_base * hide_unit 7
            set tcp.hide_step.8 + hide_base * hide_unit 8
            set tcp.hide_step.9 + hide_base * hide_unit 9
            set tcp.hide_step.10 + hide_base * hide_unit 10
            set tcp.hide_step.11 + hide_base * hide_unit 11

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       MACROS
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
    
    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Master Mcp Meter
        
        macro autohideMasterMcpMeter e
            ; set end y position
            set e_y + master.mcp.##e{1} fader_max_h{idx}
            set e_y + - master.mcp.size{1} h
            ; hide if above y
            set master.mcp.##e e_y>autohide_y  0
            set master.mcp.volume.label e_y>autohide_y  0
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Master Mcp Volume

        macro autohideMasterMcpVolume e
            ; set end y position
            set e_y + master.mcp.##e{1} fader_max_h{idx}
            set e_y + - master.mcp.size{1} h
            ; hide if above y
            set master.mcp.##e e_y>autohide_y  0
            
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Master Mcp Pan/Width

        macro autohideMasterMcpPanWidth e
            ; set end y position
            set e_y ?use_faders + master.mcp.##e{1} fader_max_h{idx}
            set e_y !use_faders + master.mcp.##e{1} master.mcp.##e{3}
            set e_y + - master.mcp.size{1} h
            ; hide if above y
            set master.mcp.##e e_y>autohide_y  0

        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Master Mcp Button

        macro autohideMasterMcpButton e
            ; set end y position
            set e_y + master.mcp.##e{1} master.mcp.##e{3}
            set e_y + - master.mcp.size{1} h
            ; hide if above y
            set master.mcp.##e e_y>autohide_y 0
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Mcp Meter

        macro autohideMcpMeter e

            ; set end y position
            set e_y mcp_width==0 + + mcp.##e{1} mcp.##e{3} mcp.volume.label{3}
            set e_y mcp_width==0 + - mcp.size{1} h

            ; set end y position
            set e_y mcp_width>0 + mcp.##e{1} fader_max_h{idx}
            set e_y mcp_width>0 + - mcp.size{1} h
            ; hide if above y
            set mcp.##e e_y>autohide_y  0
            set mcp.volume.label e_y>autohide_y  0
            
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Mcp Volume

        macro autohideMcpVolume e
            ; set end y position
            set e_y + mcp.##e{1} fader_max_h{idx}
            set e_y + - mcp.size{1} h
            ; hide if above y
            set mcp.##e e_y>autohide_y  0

        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Mcp Pan/Width

        macro autohideMcpPanWidth e
            ; set end y position
            set e_y ?use_faders + mcp.##e{1} fader_max_h{idx}
            set e_y !use_faders + mcp.##e{1} mcp.##e{3}
            set e_y + - mcp.size{1} h
            ; hide if above y
            set mcp.##e e_y>autohide_y  0

        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Autohide Mcp Button

        macro autohideMcpButton e
            ; set end y position
            set e_y + mcp.##e{1} mcp.##e{3}
            set e_y + - mcp.size{1} h
            ; hide if above y
            set mcp.##e e_y>autohide_y 0
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Freeze Drawing

        macro freezeDrawOn
            set draw_freeze 1
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Unfreeze Drawing

        macro freezeDrawOff
            set draw_freeze 0
        endmacro
    
    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Transport Next Button

        macro transNextButton
            incDrawPosX trans.button.w{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Transport Padding Button

        macro transPaddingButton
            incDrawPosX trans.pad.1{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Transport Space

        macro transSpace
            incDrawPosX trans.space{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Transport Space (Negative)

        macro transSpaceNeg
            incDrawPosX trans.space.neg{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Transport Next Line


        macro transNextLine
            resetDrawPosX
            incDrawPosY trans.button.h{idx}
            incDrawPosY trans.pad.1{idx}
            set trans.line + 1
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   TCP Padding Button

        macro tcpPaddingButton
            incDrawPosX pad.1.neg{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   TCP Padding Knob

        macro tcpPaddingKnob
            incDrawPosX pad.1.neg{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   TCP Next Button

        macro tcpNextButton
            incDrawPosX button.w.neg{idx}
        endMacro
    
    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   TCP Next Knob

        macro tcpNextKnob
            incDrawPosX tcp.knob.neg{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   MCP Next Line

        macro mcpNextLine
            incDrawPosY button.h{idx}
            incDrawPosY pad.1{idx}
            resetDrawPosX
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   MCP Next Button
        
        macro mcpNextButton
            incDrawPosX button.w{idx}
            incDrawPosX pad.1{idx}
        endMacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Width

        macro setDrawDimW set_w
            set gfx_w !draw_freeze set_w
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Height

        macro setDrawDimH set_h
            set gfx_h !draw_freeze set_h
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Dimensions

        macro setDrawDim set_w set_h
            set gfx_w !draw_freeze set_w
            set gfx_h !draw_freeze set_h
        endmacro
    
    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Increment Drawing Postion (X)

        macro incDrawPosX inc_x
            set gfx_x !draw_freeze + inc_x
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Increment Drawing Postion (Y)

        macro incDrawPosY inc_y
            set gfx_y !draw_freeze + inc_y
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Increment Drawing Position (X + Y)

        macro incDrawPos inc_x inc_y
            set gfx_x !draw_freeze + inc_x
            set gfx_y !draw_freeze + inc_y
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Position (X)

        macro setDrawPosX set_x
            set gfx_x !draw_freeze set_x
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Position (Y)

        macro setDrawPosY set_y
            set gfx_y !draw_freeze set_y
        endmacro
    
    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Position (X + Y)

        macro setDrawPos set_x set_y
            set gfx_x !draw_freeze set_x
            set gfx_y !draw_freeze set_y
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Reset Drawing Position (X)

        macro resetDrawPosX
            set gfx_x !draw_freeze gfx_src_x
        endmacro
    
    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Reset Drawing Position (Y)

        macro resetDrawPosY
            set gfx_y !draw_freeze gfx_src_y
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Reset Drawing Position (X + Y)

        macro resetDrawPos
            set gfx_x !draw_freeze gfx_src_x
            set gfx_y !draw_freeze gfx_src_y
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Origin (X)

        macro setDrawOrigin src_x
            set gfx_src_x !draw_freeze src_x
            resetDrawPosX src_x
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Origin (Y)

        macro setDrawOrigin src_y
            set gfx_src_y !draw_freeze src_y
            resetDrawPosY src_y
        endmacro

    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ;   Set Drawing Origin (X + Y)

        macro setDrawOrigin src_x src_y
            set gfx_src_x !draw_freeze src_x
            set gfx_src_y !draw_freeze src_y
            resetDrawPos src_x src_y
        endmacro

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: ENVCP
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

    macro drawEnvcp scale idx

        ;--------------------------
        ;   Setup

            ;::: Size :::
                set envcp.size [800 200]

            ;::: Minimum Height :::
                set envcp.min envcp.min.val
            
            ;::: Padding :::
                set pad.l pad.envcp.l
                set pad.r pad.envcp.r
                set pad.t pad.envcp.t
                set pad.b pad.envcp.b

            ;::: Scaled Width :::
                set width_scaled / w scale

                set f_off * - maxfolderdepth folderdepth folder.padding

                set width_scaled !link_folder_hide - width_scaled f_off
                set width_scaled ?link_folder_hide - . * maxfolderdepth folder.padding
                
                set width_scaled_hide - width_scaled tcp_iconsize
                
                set p2 - envcp.size{0} pad.r{idx}
                
                set tcp_hide_all 0
                
                setDrawOrigin p2 pad.t{idx}
        
        ;--------------------------
        ;   Draw Origin
            
            set hide_x - envcp.size{0} pad.r{idx}
            setDrawOrigin hide_x pad.t{idx}
            
            set x_offset * tcp_iconsize -1
            incDrawPosX x_offset
        
        ;--------------------------
        ;   Hide

            freezeDrawOn
            set draw_freeze width_scaled_hide>tcp.hide_step.1.n 0
                
                tcpNextButton
                set envcp.hide !draw_freeze !tcp_hide_all [gfx_x gfx_y envcp.button.w{idx} envcp.button.h{idx} 1 0 1 0] 0 0
                tcpPaddingButton
            
            freezeDrawOff

        ;--------------------------
        ;   Bypass

            freezeDrawOn
            set draw_freeze width_scaled_hide>=tcp.hide_step.0 0

                tcpNextButton
                set envcp.bypass !draw_freeze !tcp_hide_all [gfx_x gfx_y envcp.button.w{idx} envcp.button.h{idx} 1 0 1 0] 0 0
                tcpPaddingButton

            freezeDrawOff

        ;--------------------------
        ;   Arm

            freezeDrawOn
            set draw_freeze width_scaled_hide>=tcp.hide_step.1 0

                tcpNextButton
                set envcp.arm !draw_freeze !tcp_hide_all [gfx_x gfx_y envcp.button.w{idx} envcp.button.h{idx} 1 0 1 0] 0 0
                tcpPaddingButton

            freezeDrawOff

        ;--------------------------
        ;   Mod

            freezeDrawOn
                set draw_freeze envcp_type==4 width_scaled_hide>=tcp.hide_step.2 0

                tcpNextButton
                set envcp.mod !draw_freeze !tcp_hide_all [gfx_x gfx_y envcp.button.w{idx} envcp.button.h{idx} 1 0 1 0] 0 0
                tcpPaddingButton
            
            freezeDrawOff

        ;--------------------------
        ;   Learn
            
            freezeDrawOn
                set draw_freeze envcp_type==4 width_scaled_hide>=tcp.hide_step.3 0

                tcpNextButton
                set envcp.learn !draw_freeze !tcp_hide_all [gfx_x gfx_y envcp.button.w{idx} envcp.button.h{idx} 1 0 1 0] 0 0
                tcpPaddingButton

            freezeDrawOff
        
        ;--------------------------
        ;   Last Button Position
            
            set last_button_x gfx_x
        
        ;--------------------------
        ;   Value
            
            freezeDrawOn
                set draw_freeze envcp_type==4 width_scaled_hide>=tcp.hide_step.6 0
                
                set val_w + * envcp.button.w{idx} 3 pad.2{idx}
                set off_x * val_w -1
                
                set value_visible ?draw_freeze 0 1
                
                set val_w ?draw_freeze 0
                
                incDrawPosX off_x
                
                set envcp.value !draw_freeze !tcp_hide_all [gfx_x gfx_y val_w envcp.button.h{idx} 1 0 1 0] 0 0
                set envcp.value.font font.face.slim{idx}
                set envcp.value.color font.color.label.main
                set envcp.value.margin [font.margin.envcp.l{idx} font.margin.envcp.t{idx} font.margin.envcp.r{idx} font.margin.envcp.b{idx}]
                
                tcpPaddingButton
            
            freezeDrawOff
        
        ;--------------------------
        ;   Label
            
            setDrawPosX pad.l{idx}
            
            set label_w - last_button_x gfx_x
            
            set envcp.label !tcp_hide_all [gfx_x gfx_y label_w envcp.button.h{idx} 0 0 1 0] 0
            set envcp.label.font font.face.slim{idx}
            set envcp.label.color font.color.label.main
            set envcp.label.margin [font.margin.envcp.l{idx} font.margin.envcp.t{idx} font.margin.envcp.r{idx} font.margin.envcp.b{idx}]
            set envcp.label + [label.pad{idx} label.pad{idx} label.pad.neg{idx} label.pad.neg{idx}]
            
            set offset ?value_visible * scale 56
            set envcp.label.margin ?value_visible + [0 0 offset]

            front envcp.value

        ;--------------------------
        ;   Fader Clear

            set envcp.fader 0

        ;--------------------------
        ;   Fader (Horizontal)
            
            ;set ratio / w h
            ;set vertical ratio<1 1 0
            
            set w_min 75
            set h_min + * button.h{idx} 2 pad.2{idx}

            freezeDrawOn
                ;set draw_freeze !vertical h>h_min 0
                set draw_freeze width_scaled_hide>w_min h>h_min 0

                setDrawPosX pad.l{idx}
                incDrawPosY envcp.button.h{idx}
                incDrawPosY pad.1{idx}

                set env_fader_y - + gfx_y / - h gfx_y 2 * envcp.fader.h{idx} 0.6
                set env_fader_w - - envcp.size{0} pad.l{idx} pad.r{idx}
                set envcp.fader !draw_freeze [gfx_x env_fader_y env_fader_w button.w{idx} 0 0 1 0]    
                set envcp.fader.fadermode -1

            freezeDrawOff

        ;--------------------------
        ;   Fader (Vertical)

            set h_min + * button.h{idx} 4 pad.2{idx}

            freezeDrawOn
                set draw_freeze width_scaled_hide<=w_min h>h_min 0

                incDrawPosY envcp.button.h{idx}
                incDrawPosY pad.1{idx}

                set env_fader_x - - envcp.size{0} pad.r{idx} envcp.button.w{idx}
                setDrawPosX env_fader_x

                set env_fader_h - - - envcp.size{1} gfx_y pad.b{idx} unit.1{idx}
                set envcp.fader !draw_freeze [gfx_x gfx_y button.w{idx} env_fader_h 1 0 1 1]
                set envcp.fader.fadermode -1

            freezeDrawOff

    endmacro

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: TCP
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

macro drawTcp scale idx

    ;--------------------------
    ;   Setup

        ;::: Size :::
            set tcp.size [800 200]
            set tpc.min tpc.min.val
        
        ;::: Padding :::
            set pad.l pad.tcp.l
            set pad.r pad.tcp.r
            set pad.t pad.tcp.t
            set pad.b pad.tcp.b

        ;::: Scaled Width :::
            set width_scaled / w scale
            set f_off * - maxfolderdepth folderdepth folder.padding
            set width_scaled ?link_folder_hide - width_scaled f_off

        ;::: Hide Flags :::
            set hide_mix ?autohide_tcp==1 ?mixer_visible 1
            set hide_mix ?autohide_tcp==2 1
            set tcp_hide_all h<tpc.min{idx} 1 0

    ;--------------------------
    ;   Meter

        setDrawOrigin tcp.size{0} pad.t{idx}

        set meter_w pad.tcp.meter_w
        set gfx_x - tcp.size{0} meter_w{idx}
        set gfx_y border.neg{idx}
        set meter_h + tcp.size{1} border{idx}

        set tcp.meter !tcp_hide_all [gfx_x gfx_y meter_w{idx} meter_h 1 0 1 1] 0
        set tcp.meter !tcp_hide_all + [meter.pad{idx} meter.pad{idx} meter.pad.neg{idx} meter.pad.neg{idx}]
    
    ;--------------------------
    ;   Folder Start

        set fcomp_pad pad.tcp.fcomp_pad
        set fcomp_w pad.tcp.fcomp_w
        set fcomp_x - tcp.size{0} fcomp_pad{idx}

        setDrawOrigin fcomp_x 0
        

        set fcomp_h - tcp.size{1} border{idx}

        set tcp.foldercomp !tcp_hide_all [gfx_x gfx_y fcomp_w{idx} fcomp_h 1 0 1 1]

        set folder_h pad.tcp.folder_h
        set gfx_y - - tcp.size{1} border{idx} folder_h{idx}

        set tcp.folder !tcp_hide_all [gfx_x gfx_y fcomp_w{idx} folder_h{idx} 1 1 1 1]
        front tcp.folder
        front tcp.meter

    ;--------------------------
    ;   Setup Draw Pointer

        set env_x - tcp.size{0} pad.r{idx}
        setDrawOrigin env_x pad.t{idx}
        setDrawDim button.w{idx} button.h{idx}

    ;--------------------------
    ;   Envelope

        freezeDrawOn
            set draw_freeze width_scaled>=tcp.hide_step.0 0

            tcpNextButton
            set tcp.env !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   Recarm

        freezeDrawOn
            set draw_freeze width_scaled>=tcp.hide_step.1 0

            tcpNextButton
            set tcp.recarm !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   Monitor

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.2 0

            tcpNextButton
            set tcp.recmon !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   Solo

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.3 0
            
            tcpNextButton
            set tcp.solo !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton
        
        freezeDrawOff

    ;--------------------------
    ;   Mute

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.4 0

            tcpNextButton
            set tcp.mute !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff
    
    ;--------------------------
    ;   Phase

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.5 0

            tcpNextButton
            set tcp.phase !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   FX

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.7 0

            tcpNextButton
            
            set tcp.fxbyp !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0

            tcpNextButton
            tcpPaddingButton
            
            set fx_w + * button.w{idx} 2 pad.1{idx}
            
            setDrawDimW fx_w
            
            set tcp.fx !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0

            front tcp.fxbyp
            
            tcpPaddingButton
            setDrawDimW button.w{idx}

        freezeDrawOff

    ;--------------------------
    ;   IO

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.8 0

            tcpNextButton
            set tcp.io !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            tcpPaddingButton
            
        freezeDrawOff
    
    ;--------------------------
    ;   Width

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.11 0

            tcpNextKnob
            tcpPaddingKnob

            set tcp.width !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            set tcp.width.fadermode 1
            tcpPaddingKnob

        freezeDrawOff

    ;--------------------------
    ;   Pan
        
        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.11 0

            tcpNextKnob
            set tcp.pan !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            set tcp.pan.fadermode 1
            tcpPaddingKnob

        freezeDrawOff

    ;--------------------------
    ;   Volume

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.11 0

            tcpNextKnob
            set tcp.volume !draw_freeze !tcp_hide_all [gfx_x gfx_y gfx_w gfx_h 1 0 1 0] 0 0
            set tcp.volume.fadermode 1
            
        freezeDrawOff

    ;--------------------------
    ;   Last Button Position
        
        set last_button_x gfx_x

    ;--------------------------
    ;   Index


        freezeDrawOn
            set draw_freeze width_scaled>=tcp.hide_step.4.n 0

            setDrawPos pad.l{idx} pad.t{idx}   

            set idx_w index.tcp.w{idx}

            set tcp.trackidx !tcp_hide_all !draw_freeze [gfx_x gfx_y idx_w gfx_h] 0
            set tcp.trackidx.font font.face{idx}
            set tcp.trackidx.margin [0 font.margin.label.t{idx} 0 font.margin.label.b{idx} 1]
            set tcp.trackidx.color ?track_selected font.color.dark font.color.dark_boost

            incDrawPosX idx_w{idx}
            incDrawPosX pad.2{idx}
        
        freezeDrawOff

    ;--------------------------
    ;   Label

        freezeDrawOn
            set draw_freeze width_scaled>=tcp.hide_step.3.n 0
            
            set label_w - last_button_x gfx_x
            
            setDrawDimW label_w
            
            set tcp.label !tcp_hide_all !draw_freeze [gfx_x gfx_y gfx_w gfx_h 0 0 1 0] 0
            set tcp.label.font font.face{idx}
            set tcp.label.color ?track_selected font.color.label.main_highlight font.color.label.main
            set tcp.label.margin [font.margin.label.l{idx} font.margin.label.t{idx} font.margin.label.r{idx} font.margin.label.b{idx}]
            set tcp.label + [label.pad{idx} label.pad{idx} label.pad.neg{idx} label.pad.neg{idx}]

        freezeDrawOff

    ;--------------------------
    ;   Ext Mixer

        set ext_min_h + * button.h{idx} 2 pad.2{idx}

        setDrawPos pad.l{idx} pad.t{idx}
        incDrawPosX pad.1{idx}
        incDrawPosY button.h{idx}
        incDrawPosY pad.2{idx}

        set ext_w - - - w gfx_x pad.l{idx} pad.r{idx}
        set ext_h - - - tcp.size{1} gfx_y pad.t{idx} pad.b{idx}

        setDrawDim ext_w ext_h

        set tcp.fxparm !tcp_hide_all h>ext_min_h [gfx_x gfx_y gfx_w gfx_h 0 0 0 1] 0
        set tcp.fxparm.font [font.face{idx} fxlist.h{idx} tcp.fxparm.w_min{idx} tcp.fxparm.w_max{idx} 0 0 list.bar.gap{idx} list.bar{idx}]
        set tcp.fxparm.margin [font.margin.fxlist.l{idx} font.margin.fxlist.t{idx} font.margin.fxlist.r{idx} font.margin.fxlist.b{idx} 0 0 0 list.col.gap{idx}]
        set tcp.fxembedheader.color font.color.dark

    ;--------------------------
    ;   Meter VU

        ; scales
        set tcp.meter.scale.color.lit.bottom 0
        set tcp.meter.scale.color.lit.top 0
        set tcp.meter.scale.color.unlit.bottom 0
        set tcp.meter.scale.color.unlit.top 0
        set tcp.meter.readout.color 0
        set tcp.meter.rmsreadout.color 0

        ; vu division
        set tcp.meter.vu.div [meter.div{idx} 1]

endmacro

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: MASTER TCP
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

macro drawMstTcp scale idx

    ;--------------------------
    ;   Setup

        ;::: Size :::
            set master.tcp.size [800 200]

        ;::: Padding :::
            set pad.l pad.tcp.mst.l
            set pad.r pad.tcp.mst.r
            set pad.t pad.tcp.mst.t
            set pad.b pad.tcp.mst.b

        ;::: Scaled Width :::
            set width_scaled / w scale
            set f_off * - maxfolderdepth folderdepth folder.padding
            set width_scaled ?link_folder_hide - width_scaled f_off

        ;::: Hide Flags :::
            set hide_mix ?autohide_tcp==1 ?mixer_visible 1
            set hide_mix ?autohide_tcp==2 1
            set tcp_hide_all h<tpc.min{idx} 1 0

    ;--------------------------
    ;   Set Drawing Origin

        set env_x - master.tcp.size{0} pad.r{idx}
        setDrawOrigin env_x pad.t{idx}

    ;--------------------------
    ;   Envelope

        freezeDrawOn
            set draw_freeze width_scaled>=tcp.hide_step.0 0

            tcpNextButton
            set master.tcp.env !draw_freeze !tcp_hide_all [gfx_x gfx_y button.w{idx} button.h{idx} 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   FX

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.2 0

            tcpNextButton

            set master.tcp.fxbyp !draw_freeze !tcp_hide_all [gfx_x gfx_y button.w{idx} button.h{idx} 1 0 1 0] 0 0
            

            tcpNextButton
            tcpPaddingButton

            set fx_w + * button.w{idx} 2 pad.1{idx}
            set master.tcp.fx !draw_freeze !tcp_hide_all [gfx_x gfx_y fx_w button.h{idx} 1 0 1 0] 0 0
            front master.tcp.fxbyp

            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   Solo

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.3 0

            tcpNextButton
            set master.tcp.solo !draw_freeze !tcp_hide_all [gfx_x gfx_y button.w{idx} button.h{idx} 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   Mute
        
        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.4 0
            
            tcpNextButton
            set master.tcp.mute !draw_freeze !tcp_hide_all [gfx_x gfx_y button.w{idx} button.h{idx} 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff
    
    ;--------------------------
    ;   Mono

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.5 0

            tcpNextButton
            set master.tcp.mono !draw_freeze !tcp_hide_all [gfx_x gfx_y button.w{idx} button.h{idx} 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   IO

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.6 0

            tcpNextButton
            set master.tcp.io !draw_freeze !tcp_hide_all [gfx_x gfx_y button.w{idx} button.h{idx} 1 0 1 0] 0 0
            tcpPaddingButton

        freezeDrawOff

    ;--------------------------
    ;   Width

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.9 0

            tcpNextKnob
            
            set master.tcp.width !draw_freeze !tcp_hide_all [gfx_x gfx_y tcp.knob{idx} tcp.knob{idx} 1 0 1 0] 0 0
            set master.tcp.width.fadermode 1
            tcpPaddingKnob

        freezeDrawOff

    ;--------------------------
    ;   Pan

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.9 0
            
            tcpNextKnob
            set master.tcp.pan !draw_freeze !tcp_hide_all [gfx_x gfx_y tcp.knob{idx} tcp.knob{idx} 1 0 1 0] 0 0
            set master.tcp.pan.fadermode 1
            tcpPaddingKnob

        freezeDrawOff

    ;--------------------------
    ;   Volume

        freezeDrawOn
            set draw_freeze !hide_mix width_scaled>=tcp.hide_step.9 0

            tcpNextKnob 
            set master.tcp.volume !draw_freeze !tcp_hide_all [gfx_x gfx_y tcp.knob{idx} tcp.knob{idx} 1 0 1 0] 0 0
            set master.tcp.volume.fadermode 1
            tcpPaddingKnob
            

        freezeDrawOff
    
    ;--------------------------
    ;   Last Button Position
    
        set last_button_x gfx_x

    ;--------------------------
    ;   Meter
    
        setDrawPos pad.l{idx} pad.t{idx}
        set meter_w - last_button_x gfx_x
        set master.tcp.meter !tcp_hide_all [gfx_x gfx_y meter_w button.h{idx} 0 0 1 0] 0
        set master.tcp.meter !tcp_hide_all + [meter.pad{idx} meter.pad{idx} meter.pad.neg{idx} meter.pad.neg{idx}]

    ;--------------------------
    ;   Ext Mixer

        set ext_min_h + * button.h{idx} 2 pad.2{idx}

        setDrawPos pad.l{idx} pad.t{idx}
        incDrawPosX pad.1{idx}
        incDrawPosY button.h{idx}
        incDrawPosY pad.2{idx}
        
        set ext_w - - - w gfx_x pad.l{idx} pad.r{idx}
        set ext_h - - - master.tcp.size{1} gfx_y pad.t{idx} pad.b{idx}

        setDrawDim ext_w ext_h

        set master.tcp.fxparm !tcp_hide_all h>ext_min_h [gfx_x gfx_y gfx_w gfx_h 0 0 0 1] 0
        set master.tcp.fxparm.font [font.face{idx} fxlist.h{idx} tcp.fxparm.w_min{idx} tcp.fxparm.w_max{idx} 0 0 list.bar.gap{idx} list.bar{idx}]
        set master.tcp.fxparm.margin [font.margin.fxlist.l{idx} font.margin.fxlist.t{idx} font.margin.fxlist.r{idx} font.margin.fxlist.b{idx} 0 0 0 list.col.gap{idx}]
        set master.tcp.fxembedheader.color font.color.dark

    ;--------------------------
    ;   Meter VU

        ; scales
        set master.tcp.meter.scale.color.lit.bottom meter.color.lit.bot
        set master.tcp.meter.scale.color.lit.top meter.color.lit.top
        set master.tcp.meter.scale.color.unlit.bottom meter.color.unlit.bot
        set master.tcp.meter.scale.color.unlit.top meter.color.unlit.top

        ; readout
        set master.tcp.meter.readout.color meter.color.read
        set master.tcp.meter.rmsreadout.color meter.color.rms.read

        ; vu division
        set master.tcp.meter.vu.div [meter.div{idx} 1]

endmacro


;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: MCP
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

macro drawMcp scale idx

    ;--------------------------
    ;   Setup

        ;::: Fader Mode :::
            set use_faders mcp_allfader&1 1 0
            
        ;::: Horizontal Faders :::
            set faders_horz mcp_allfader>3 1 0

        ;::: Fader Split Factor :::
            set fader_split_factor 0.05
            set fader_split_factor + * mcp_fadersplit 0.0035
            set fader_split_factor mcp_width=1 + * mcp_fadersplit 0.0035

        ;::: Ext Mixer Values :::
            set ext_top_height mcp_fx_space<100 mcp_fx_space 0
        
        ;::: Sidebar Values :::
            set sidebar_on 0
            set sidebar_on mcp_fx_space>=100 mcp_fx_space<200 1 0 0
            set sidebar_on ?mcp_sidebar_embed mcp_fxembed>0 1
            set sidebar_width_val - mcp_fx_space 99
            set sidebar_width_val mcp_sidebar_embed>sidebar_width_val mcp_fxembed>0 mcp_sidebar_embed

        ;::: Fixed Ext Mixer :::
            set ext_fixed mcp_fx_space<200 1 0

        ;::: Padding :::
            set pad.l pad.mcp.l
            set pad.r pad.mcp.r
            set pad.t pad.mcp.t
            set pad.b pad.mcp.b
            set pad.r + border
            set pad.t + border

        ;::: Adjustable Width :::
            set mcp_w mcp_width==0 * button.w{idx} 1
            set mcp_w mcp_width==0 +: pad.l{idx} +: pad.r{idx}
            set mcp_w mcp_width==1 * button.w{idx} 2
            set mcp_w mcp_width==1 +: pad.l{idx} +: pad.r{idx} +: pad.1{idx}
            set mcp_w mcp_width==2 * button.w{idx} 3
            set mcp_w mcp_width==2 +: pad.l{idx} +: pad.r{idx} +: pad.2{idx}
            set mcp_w mcp_width==3 * button.w{idx} 4
            set mcp_w mcp_width==3 +: pad.l{idx} +: pad.r{idx} +: pad.3{idx}
            set mcp_w mcp_width==4 * button.w{idx} 5
            set mcp_w mcp_width==4 +: pad.l{idx} +: pad.r{idx} +: pad.4{idx}
            set mcp_w mcp_width==5 * button.w{idx} 9
            set mcp_w mcp_width==5 +: pad.l{idx} +: pad.r{idx} +: pad.8{idx}

        ;::: Size :::
            set mcp.size [mcp_w 600]

        ;::: Size Bar Width Increase :::
            set sidebar_w_min * unit.1{idx} 10
            set sidebar_w_add * sidebar_width_val * 4 scale
            set sidebar_w_sum + sidebar_w_min sidebar_w_add
            set mcp.size ?sidebar_on + [sidebar_w_sum]

    ;--------------------------
    ;   Draw Origin
        
        setDrawOrigin pad.l{idx} pad.t{idx}

    ;--------------------------
    ;   ExtMixer (Top)

        setDrawPos 0 0
        
        ; width
        set ext_w mcp.size{0}
        
        ; height
        set ext_h + * unit.1{idx} 30 * - ext_top_height 1 / h 150
        
        ; rescaling when sends or parameters are not grouped
        set rescale 0
        
        set rescale mcp_wantextmix&2 1
        set rescale mcp_wantextmix&4 1
        
        set rescale_factor / - h mcp.min_height{idx} h
        
        set ext_h ?rescale + * ext_h rescale_factor mcp.min_height{idx}        

        ; draw
        set mcp.extmixer.mode ext_fixed
        set mcp.extmixer.position ext_top_height>0 [gfx_x gfx_y ext_w ext_h]
        set mcp.fxlist.font [font.face{idx} fxlist.h{idx} 0 0 0 0 list.bar.gap{idx} list.bar{idx}]
        set mcp.fxlist.margin [font.margin.fxlist.l{idx} 0 font.margin.fxlist.r{idx} 0 0 0 0]
        
        set mcp.fxparm.font mcp.fxlist.font
        set mcp.fxparm.margin mcp.fxlist.margin
        set mcp.sendlist.font mcp.fxlist.font
        set mcp.sendlist.margin mcp.fxlist.margin
        
        ResetDrawPos
        
        ;if Sidebar off & Mixer visible
        freezeDrawOn
            set draw_freeze !sidebar_on mcp_fx_space>0 mcp_fx_space<200 0
            incDrawPosY ext_h
        freezeDrawOff

    ;-------------------------- 
    ;   ExtMixer (Sidebar)

        ;if Sidebar On
        freezeDrawOn
            set draw_freeze ?sidebar_on 0

            ; position
            setDrawPos mcp_w border.neg{idx}
            
            ; store position
            set sidebar_x gfx_x
            set sidebar_y gfx_y
        
            ; width
            set ext_w - mcp.size{0} gfx_x

            resetDrawPos

        freezeDrawOff

    ;--------------------------
    ;   FX

        ; large button
        set fx_w + * button.w{idx} 2 pad.1{idx}
        set fx_h + * button.h{idx} 2 pad.1{idx}
        ; draw
        set mcp.fx mcp_width==0 [gfx_x gfx_y button.w{idx} fx_h] [gfx_x gfx_y fx_w button.h{idx}]

        ;if  Width = 0
        freezeDrawOn
            set draw_freeze mcp_width==0 0 1         
            mcpNextLine

        ;if  Width > 0
        freezeDrawOn
            set draw_freeze mcp_width>0 0 1
            mcpNextButton

        freezeDrawOff

    ;--------------------------
    ;   FX Bypass

        ; draw
        set mcp.fxbyp [gfx_x gfx_y button.w{idx} button.h{idx}]

        front mcp.fxbyp

        ;if  Width < 2
        freezeDrawOn
            set draw_freeze mcp_width<2 0
            mcpNextLine
        
        ;if  Width >= 2
        freezeDrawOn
            set draw_freeze mcp_width>=2 0

            mcpNextButton
        
        freezeDrawOff

    ;--------------------------
    ;   Envelope

        ; normal width
        set env_w button.w{idx}

        ; extended width
        set env_w mcp_width==1 +: pad.1{idx} +: button.w{idx}
        set env_w mcp_width==4 +: pad.1{idx} +: button.w{idx}

        ; draw
        set mcp.env [gfx_x gfx_y env_w button.h{idx}]

        ;if  Width < 4
        freezeDrawOn
            set draw_freeze mcp_width<4 0
            mcpNextLine

        ;if  Width >= 4
        freezeDrawOn
            set draw_freeze mcp_width>=4 0

            incDrawPosX env_w
            incDrawPosX pad.1{idx}

        freezeDrawOff

    ;--------------------------
    ;   Monitor (Width = 4)

        ; draw
        set mcp.recmon mcp_width==4 [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width = 4
        freezeDrawOn
            set draw_freeze mcp_width==4 0
            mcpNextLine

        freezeDrawOff

    ;--------------------------
    ;   IO
    ;--------------------------

        ; draw
        set mcp.io [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width = 0
        freezeDrawOn
            set draw_freeze mcp_width==0 0

            mcpNextLine

        ;if  Width = 1
        freezeDrawOn
            set draw_freeze mcp_width==1 0
            set draw_freeze mcp_width>=2 0

            mcpNextButton

        freezeDrawOff

    ;--------------------------
    ;   Phase

        ; draw
        set mcp.phase [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width <=1
        freezeDrawOn
            set draw_freeze mcp_width<=1 0

            mcpNextLine

        ;if  Width > 0
        freezeDrawOn
            set draw_freeze mcp_width>1 0

            mcpNextButton

        freezeDrawOff

    ;----------------------------
    ;   Monitor (Width = 2 | 3)

        freezeDrawOn
            set draw_freeze mcp_width==2 0
            set draw_freeze mcp_width==3 0
            
            ; draw
            set mcp.recmon !draw_freeze [gfx_x gfx_y button.w{idx} button.h{idx}]

            mcpNextLine

        freezeDrawOff

    ;--------------------------
    ;   Mute

        ; draw
        set mcp.mute [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width = 0
        freezeDrawOn
            set draw_freeze mcp_width==0 0

            mcpNextLine

        ;if  Width > 0
        freezeDrawOn
            set draw_freeze mcp_width>0 0

            mcpNextButton

        freezeDrawOff

    ;--------------------------
    ;   Solo

        ; draw
        set mcp.solo [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width <= 1
        freezeDrawOn
            set draw_freeze mcp_width<=1 0

            mcpNextLine

        ;if  Width > 1
        freezeDrawOn
            set draw_freeze mcp_width>1 0

            mcpNextButton

        freezeDrawOff

    ;--------------------------
    ;   RecArm
    
        ; draw
        set mcp.recarm [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width = 0 | 2 | 4
        freezeDrawOn
            set draw_freeze mcp_width==0 0
            set draw_freeze mcp_width==2 0
            set draw_freeze mcp_width==4 0

            mcpNextLine

        ;if  Width = 1 | 5
        freezeDrawOn
            set draw_freeze mcp_width==1 0
            set draw_freeze mcp_width==5 0
            
            mcpNextButton
        
        freezeDrawOff

    ;--------------------------
    ;   Monitor

        ; draw
        set mcp.recmon mcp_width==0 [gfx_x gfx_y button.w{idx} button.h{idx}]
        set mcp.recmon mcp_width==1 [gfx_x gfx_y button.w{idx} button.h{idx}]
        set mcp.recmon mcp_width==5 [gfx_x gfx_y button.w{idx} button.h{idx}]

        ;if  Width = 0 | 1 | 3 | 5
        freezeDrawOn
            set draw_freeze mcp_width==0 0
            set draw_freeze mcp_width==1 0
            set draw_freeze mcp_width==3 0
            set draw_freeze mcp_width==5 0

            mcpNextLine

        freezeDrawOff

    ;* * * * * * * * * * * * * * * * * * * * * * * * * * *
    ;       Meter Top
    ;* * * * * * * * * * * * * * * * * * * * * * * * * * * 

        freezeDrawOn
            set draw_freeze mcp_width==0 0

            ; dimensions
            set meter_h !draw_freeze / h 10
            set meter_w !draw_freeze button.w{idx}

            ; draw
            set mcp.meter !draw_freeze [gfx_x gfx_y meter_w meter_h 0 0 0 0]

            incDrawPosY meter_h
            
        freezeDrawOff

    ;--------------------------
    ;   Volume Label Top

        freezeDrawOn
            set draw_freeze mcp_width==0 0

            ; draw
            set mcp.volume.label !draw_freeze [gfx_x gfx_y meter_w volume_set.h{idx} 0 0 0 0]
            set mcp.volume.label !draw_freeze + [0 border.neg{idx} 0 border{idx}]
            set mcp.volume.label.margin [font.margin.label.slim.l{idx} font.margin.label.slim.t{idx} font.margin.label.slim.r{idx} font.margin.label.slim.b{idx} 0.5]
            set mcp.volume.label.font font.face.slim{idx}
            set mcp.volume.label.color font.color
            
            incDrawPosY volume_set.h{idx}
            incDrawPosY pad.1{idx}
        

        freezeDrawOff
           

    ;* * * * * * * * * * * * * * * * * * * * * * * * * * *
    ;       Pan / Width Faders (Top)
    ;* * * * * * * * * * * * * * * * * * * * * * * * * * * 

        ;--------------------------
        ;   Pan (Fader - Vertical)

            freezeDrawOn
                set draw_freeze !faders_horz ?use_faders mcp_width==1 0
                
                
                resetDrawPosX
                
                set bot + - mcp.size{1} bottom_y pad.b{idx}
                set pan_h - h gfx_y
                set pan_h * fader_split_factor

                set pan_h pan_h<mcp.knob{idx} mcp.knob{idx}

                ; draw
                set mcp.pan !draw_freeze [gfx_x gfx_y mcp.fader{idx} pan_h 0 0 0 0]
                set mcp.pan.fadermode !draw_freeze 0

                incDrawPosX button.w{idx}
                incDrawPosX pad.1{idx}

            ;--------------------------
            ;   Width (Fader - Vertical)

                ; draw
                set mcp.width !draw_freeze [gfx_x gfx_y mcp.fader{idx} pan_h 0 0 0 0]
                set mcp.width.fadermode !draw_freeze 0

                resetDrawPosX
                incDrawPosY pan_h
                incDrawPosY pad.1{idx}

            freezeDrawOff    

        ;--------------------------
        ;   Pan (Fader - Horizontal)

            freezeDrawOn
                set draw_freeze ?use_faders ?faders_horz mcp_width>0 0

                resetDrawPosX

                set pan_w mcp_width==1 + * button.w{idx} 2 pad.1{idx}
                set pan_w mcp_width==2 + * button.w{idx} 3 pad.2{idx}
                set pan_w mcp_width==3 + * button.w{idx} 3 pad.2{idx}
                set pan_w mcp_width==4 + * button.w{idx} 5 pad.4{idx}
                set pan_w mcp_width==5 + * button.w{idx} 9 pad.8{idx}

                ; draw
                set mcp.pan !draw_freeze [gfx_x gfx_y pan_w button.w{idx} 0 0 0 0]
                set mcp.pan.fadermode !draw_freeze 0

                incDrawPosY button.h{idx}
                incDrawPosY pad.1{idx}

            ;--------------------------
            ;   Width (Fader - Horizontal)

                ; draw
                set mcp.width !draw_freeze [gfx_x gfx_y pan_w button.w{idx} 0 0 0 0]
                set mcp.width.fadermode !draw_freeze 0
                
                incDrawPosY button.w{idx}
                incDrawPosY pad.1{idx}

            freezeDrawOff    

    
    ;--------------------------
    ;   Pan (Knob)

        ;if  Width = 2
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==2 0
            
            setDrawPosX mcp.recarm{0}
            
        ;if  Width = 3
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==3 0

            setDrawPosX mcp.env{0}
            incDrawPosX button.w{idx}
            incDrawPosX pad.1{idx}
            setDrawPosY mcp.env{1}
            set offset * mcp.knob{idx} 0.1
            incDrawPosY offset

        ;if  Width >= 4
        freezeDrawOn
            set draw_freeze !use_faders mcp_width>=4 0

            setDrawPosX mcp.recmon{0}

            setDrawPosY mcp.recarm{1}
            incDrawPosY button.h{idx}
            incDrawPosY pad.1{idx}

        freezeDrawOn
            set draw_freeze !use_faders 0

            ; draw
            set mcp.pan !draw_freeze [gfx_x gfx_y mcp.knob{idx} mcp.knob{idx}]
            set mcp.pan.fadermode !draw_freeze 0

        ;if  Width = 0
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==0 0

            incDrawPosY mcp.knob{idx}
            incDrawPosY pad.1{idx}

        ;if  Width = 1
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==1 0

            incDrawPosX mcp.knob{idx}
            incDrawPosX pad.1{idx}

        ;if  Width >= 2
        freezeDrawOn
            set draw_freeze !use_faders mcp_width>=2 0

            incDrawPosY mcp.knob{idx}
            incDrawPosY pad.1{idx}

        freezeDrawOff

    ;--------------------------
    ;   Width (Knob)
        
        freezeDrawOn
            set draw_freeze !use_faders 0
        
            ; draw
            set mcp.width !draw_freeze [gfx_x gfx_y mcp.knob{idx} mcp.knob{idx}]
            set mcp.width.fadermode !draw_freeze 0
        
        freezeDrawOff

        ;if  Width = 0 | 1 | 2
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==0 0
            set draw_freeze !use_faders mcp_width==1 0
            
            resetDrawPosX 1
            incDrawPosY mcp.knob{idx}
            incDrawPosY pad.2{idx}

        ;if  Width = 3
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==2 0
            set draw_freeze !use_faders mcp_width==3 0

            setDrawPos mcp.mute{0} mcp.mute{1}
            incDrawPosY button.h{idx}
            incDrawPosY pad.1{idx}

        ;if  Width = 4
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==4 0

            setDrawPos mcp.io{0} mcp.io{1}
            incDrawPosY button.h{idx}
            incDrawPosY pad.1{idx}

        ;if  Width = 5
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==5 0

            setDrawPos mcp.fx{0} mcp.fx{1}
            incDrawPosY button.h{idx}
            incDrawPosY pad.1{idx}

        freezeDrawOff

    ;* * * * * * * * * * * * * * * * * * * * * * * * * * *
    ;        Save Top Position
    ;* * * * * * * * * * * * * * * * * * * * * * * * * * *

    set post_pan_x gfx_x
    set post_pan_y gfx_y

    ;--------------------------
    ;   Folder

        ; Set Y Position
        set folder_y - mcp.size{1} pad.b{idx}
        setDrawPosY folder_y        
        incDrawPosY index.h.neg{idx}
        incDrawPosY button.h.neg{idx}
        
        set index_h + button.h{idx} index.h{idx}

        set folder_x border.neg{idx}
        set folder_w + mcp.size{0} border{idx}

        set folder_w mcp_width==0 + mcp.size{0} border{idx}

        set mcp.folder [folder_x gfx_y folder_w index_h 0 1 0 1]
        
    ;--------------------------
    ;   Index


        set index_x folder_x
        set index_w folder_w

        ; Draw
        set mcp.trackidx [index_x gfx_y index_w index_h 0 1 0 1]
        set mcp.trackidx.color ?track_selected font.color.label.sub_highlight font.color.label.sub
        
        set mcp.trackidx.margin [font.margin.label.l{idx} font.margin.index.t{idx} font.margin.label.r{idx} font.margin.label.slim.b{idx} 0]
        
        set mcp.trackidx.font font.face.slim{idx}
        set mcp.trackidx + [label.pad{idx} label.pad{idx} label.pad.neg{idx} label.pad.neg{idx}]

        front mcp.folder

    ;--------------------------
    ;   Label

        resetDrawPosX

        set label_x index_x
        set label_w index_w

        ; draw
        set mcp.label [label_x gfx_y label_w button.h{idx} 0 1 0 1]
        set mcp.label.font font.face{idx}
        set mcp.label.margin [font.margin.label.l{idx} font.margin.label.t{idx} font.margin.label.r{idx} font.margin.label.b{idx} 0]
        set mcp.label.color ?track_selected font.color.label.main_highlight font.color.label.main
        set mcp.label + [label.pad{idx} label.pad{idx} label.pad.neg{idx} label.pad.neg{idx}]
        
        front mcp.label

    ;--------------------------
    ;   Label Margin Adjustment

        set mcp.trackidx.margin folderstate>0 + [font.margin.offset.folder{idx}]
        
        set mcp.label.margin folderstate>0 + [0 0 font.margin.offset.folder{idx}]
        set mcp.label.margin folderstate<0 + [0 0 font.margin.offset.folder{idx}]
        
        

  
    ;* * * * * * * * * * * * * * * * * * * * * * * * * * *
    ;       Store Bottom Position
    ;* * * * * * * * * * * * * * * * * * * * * * * * * * * 

        incDrawPosY pad.1.neg{idx}

        set bottom_x gfx_x
        set bottom_y gfx_y

        ;-------------------------------
        ;   Recall Post-Pan Position

        setDrawPos post_pan_x post_pan_y
        
        ;--------------------------
        ;   Meter (Normal | Width > 0)

        ; height | width = 0
        set meter_h mcp_width==0 / h 10

        ; height | width > 0
        set meter_h mcp_width>0 - bottom_y gfx_y
        set meter_h + volume_set.h.neg{idx}

        ; width
        set meter_w button.w{idx}
        set meter_w mcp_width==2 +: button.w{idx} +: pad.1{idx}
        set meter_w mcp_width==3 +: * button.w{idx} 2 +: pad.2{idx}   
        set meter_w mcp_width==4 +: * button.w{idx} 3 +: pad.3{idx}   
        set meter_w mcp_width==5 +: * button.w{idx} 7 +: pad.7{idx}   

        ; draw
        set mcp.meter !use_faders mcp_width>0 [gfx_x gfx_y meter_w meter_h 0 0 0 1]

        ;if  Width = 1 | 2 | 3
        freezeDrawOn
            set draw_freeze !use_faders mcp_width==1 0
            set draw_freeze !use_faders mcp_width==2 0
            set draw_freeze !use_faders mcp_width==3 0

            incDrawPosX meter_w
            incDrawPosX pad.1{idx}


        ;if  Width > 3
        freezeDrawOn
            set draw_freeze !use_faders mcp_width>3 0

            setDrawPos mcp.width{0} mcp.width{1}
            incDrawPosY mcp.knob{idx}
            incDrawPosY pad.1{idx}

        freezeDrawOff

    ;--------------------------
    ;   Meter (Fader Mode)
        
        ;if  Width = 1
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width==1 0

        ;if  Width >= 4
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width>=4 0

            resetDrawPosX

        freezeDrawOff

        ; height | width = 0
        set meter_h mcp_width==0 / h 10

        ; height | width > 0
        set meter_h mcp_width>0 - bottom_y gfx_y
        set meter_h + volume_set.h.neg{idx}

        ; width
        set meter_w button.w{idx}
        set meter_w mcp_width==2 +: * button.w{idx} 1 +: pad.1{idx}
        set meter_w mcp_width==3 +: * button.w{idx} 2 +: pad.2{idx}
        set meter_w mcp_width==4 +: * button.w{idx} 3 +: pad.3{idx}
        set meter_w mcp_width==5 +: * button.w{idx} 7 +: pad.7{idx}

        ; draw
        set mcp.meter ?use_faders mcp_width>0 [gfx_x gfx_y meter_w meter_h 0 0 0 1]


    ;--------------------------
    ;   Volume Label

        freezeDrawOn
            set draw_freeze mcp_width>0 0

            set y_restore gfx_y
            incDrawPosY meter_h

            resetDrawPosX
            
            ; draw
            set mcp.volume.label !draw_freeze [gfx_x gfx_y meter_w volume_set.h{idx} 0 1 0 1]
            set mcp.volume.label !draw_freeze + [0 border.neg{idx} 0 border{idx}]
            set mcp.volume.label.margin [font.margin.label.slim.l{idx} font.margin.label.slim.t{idx} font.margin.label.slim.r{idx} font.margin.label.slim.b{idx} 0.5]
            set mcp.volume.label.font font.face.slim{idx}
            set mcp.volume.label.color font.color
            set mcp.volume.label + [label.pad{idx} label.pad{idx} label.pad.neg{idx} label.pad.neg{idx}]

            setDrawPosY y_restore
        freezeDrawOff
            
        ;if  Width ? 1
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width==1 0

            incDrawPosX button.w{idx}
            incDrawPosX pad.1{idx}

        ;if  Width ? 2
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width==2 0

            incDrawPosX button.w{idx}
            incDrawPosX button.w{idx}
            incDrawPosX pad.2{idx}

        ;if  Width ? 3
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width==3 0

            setDrawPos mcp.recmon{0} mcp.fx{1}
            incDrawPosX button.w{idx}
            incDrawPosX pad.1{idx}

        ;if  Width ? 4
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width==4 0

            setDrawPosX mcp.solo{0}
            
        ;if  Width ? 5
        freezeDrawOn
            set draw_freeze ?use_faders mcp_width==5 0

            setDrawPosX mcp.recarm{0}

        freezeDrawOff



    ;--------------------------
    ;   Pan (Fader)

        freezeDrawOn
            set draw_freeze !faders_horz ?use_faders 0

            resetDrawPosX

        freezeDrawOn
            set draw_freeze !faders_horz ?use_faders mcp_width>=2 0

            incDrawPosX mcp.meter{2}
            incDrawPosX pad.1{idx}

        freezeDrawOn
            set draw_freeze ?use_faders !faders_horz mcp_width!=1 0
            set draw_freeze ?use_faders mcp_width==0 0

            set bot + - mcp.size{1} bottom_y pad.b{idx}
            set pan_h - - h gfx_y bot
            set pan_h * fader_split_factor
            
            set pan_h pan_h<mcp.knob{idx} mcp.knob{idx}        

            ; draw
            set mcp.pan !draw_freeze [gfx_x gfx_y mcp.fader{idx} pan_h 0 0 0 0]
            set mcp.pan.fadermode !draw_freeze 0

            ;if  All Fader On | width = 0
            incDrawPosY pan_h
            incDrawPosY pad.1{idx}

        ;--------------------------
        ;   Width (Fader)

            ; draw
            set mcp.width !draw_freeze [gfx_x gfx_y mcp.fader{idx} pan_h 0 0 0 0]
        
            set mcp.width.fadermode !draw_freeze 0

            incDrawPosY pan_h
            incDrawPosY pad.1{idx}

    freezeDrawOff    

    ;--------------------------
    ;   Volume

        freezeDrawOn
            set draw_freeze ?mcp_width>0 0

            resetDrawPosX
            incDrawPosX mcp.meter{2}
            incDrawPosX pad.1{idx}

        freezeDrawOff

        freezeDrawOn
            set draw_freeze ?mcp_width==2 !use_faders 0

            setDrawPosY mcp.width{1}
            incDrawPosY mcp.width{3}
            incDrawPosY pad.1{idx}

        freezeDrawOff


        ; height
        set vol_h - bottom_y gfx_y

        ; draw
        set mcp.volume [gfx_x gfx_y mcp.fader{idx} vol_h 0 0 0 1]
        set mcp.volume.fadermode 0
        

    ;--------------------------
    ;   Sidebar (Draw)

        ;if Sidebar On
        freezeDrawOn
            set draw_freeze ?sidebar_on 0
            ; position
            setDrawPos sidebar_x 0
            ; height
            set ext_h + + pad.1{idx} border{idx} - bottom_y gfx_y
            ; draw
            set mcp.extmixer.position !draw_freeze [gfx_x gfx_y ext_w ext_h 0 0 0 1]

        freezeDrawOff

    ;--------------------------
    ;   Post-Button Offset

        set mcp.fx + [button.offset]
        set mcp.fxbyp + [button.offset]
        set mcp.env + [button.offset]
        set mcp.io + [button.offset]
        set mcp.phase + [button.offset]
        set mcp.mute + [button.offset]
        set mcp.solo + [button.offset]
        set mcp.recarm + [button.offset]
        set mcp.recmon + [button.offset]
    
    ;--------------------------
    ;   Meter VU

        ; scales
        set mcp.meter.scale.color.lit.bottom meter.color.lit.bot
        set mcp.meter.scale.color.lit.top meter.color.lit.top
        set mcp.meter.scale.color.unlit.bottom meter.color.unlit.bot
        set mcp.meter.scale.color.unlit.top meter.color.unlit.top
        ; readout
        set mcp.meter.readout.color meter.color.read
        set mcp.meter.rmsreadout.color meter.color.rms.read
        ; vu division
        set mcp.meter.vu.div [meter.div{idx} 1]

    ;--------------------------
    ;   Correct Meter Overshoot

        set mcp.meter + [meter.pad{idx} meter.pad{idx} meter.pad.neg{idx} meter.pad.neg{idx}]

    ;--------------------------
    ;   Resize Elements

        set ext_max_h - - h + pad.3{idx} - mcp.size{1} bottom_y mcp.extmixer.position{1}
        set ext_h - bottom_y mcp.extmixer.position{1}
        set mcp.extmixer.position !sidebar_on mcp.extmixer.position{3}>ext_max_h [. . . ext_h . . . 1]

    ;--------------------------
    ;   Autohide Elements

        set autohide_y bottom_y
        set fader_max_h pad.mcp.fader_max_h

        autohideMcpButton mute
        autohideMcpButton solo
        autohideMcpButton recmon
        autohideMcpButton recarm
        autohideMcpButton fx
        autohideMcpButton fxbyp
        autohideMcpButton env
        autohideMcpButton io
        autohideMcpButton phase
        autohideMcpPanWidth pan
        autohideMcpPanWidth width
        autohideMcpVolume volume
        autohideMcpMeter meter


endmacro


;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: MASTER MCP
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

macro drawMstMcp scale idx

    ;-------------------------- 
    ;   Setup

    ;::: Fader Mode :::
    set use_faders mcp_allfader&2 1 0

    ;::: Horizontal Faders :::
    set faders_horz mcp_horz_pw&2 1 0

    ;::: Fader Split Factor :::
    set fader_split_factor 0.05
    set fader_split_factor + * mcp_fadersplit_mst 0.0035

    ;::: Ext Mixer Values :::
    set ext_top_height mcp_mst_fx_space<100 mcp_mst_fx_space 0
    
    ;::: Fixed Ext Mixer :::
    set ext_fixed mcp_mst_fx_space<200 1 0

    ;::: Sidebar Values :::
    set sidebar_on mcp_mst_fx_space>=100 mcp_mst_fx_space<200 1 0 0    ; on fx space >= 100
    set sidebar_width_val - mcp_mst_fx_space 99

    ;::: Padding :::
    set pad.l pad.mcp.mst.l
    set pad.r pad.mcp.mst.r
    set pad.t pad.mcp.mst.t
    set pad.b pad.mcp.mst.b
    set pad.r + border
    set pad.t + border

    ;::: Width :::
    set mst_w * button.w{idx} 4
    set mst_w +: pad.l{idx} +: pad.r{idx} +: pad.3{idx}

    ;::: Size :::
    set master.mcp.size [mst_w 600]

    ;::: Size Bar Width Increase :::
    set sidebar_w_min * unit.1{idx} 10
    set sidebar_w_add * sidebar_width_val * 4 scale
    set sidebar_w_sum + sidebar_w_min sidebar_w_add
    set master.mcp.size ?sidebar_on + [sidebar_w_sum]

    ;--------------------------
    ;   Draw Origin

    setDrawOrigin pad.l{idx} pad.t{idx}

    ;--------------------------
    ;   ExtMixer (Top)

            setDrawPos 0 0

    ; width
    set ext_w master.mcp.size{0}
    
    ; height
    set ext_h + * unit.1{idx} 30 * - ext_top_height 1 / h 150
    set ext_h !ext_top_height 0

    ; draw
    set master.mcp.extmixer.mode ext_fixed
    set master.mcp.extmixer.position ext_top_height>0 [gfx_x gfx_y ext_w ext_h]
    set master.mcp.fxlist.font [font.face{idx} fxlist.h{idx} 0 0 0 0 list.bar.gap{idx} list.bar{idx}]
    set master.mcp.fxlist.margin [font.margin.fxlist.l{idx} 0 font.margin.fxlist.r{idx} 0 0 0 0]
    
    set master.mcp.fxparm.font master.mcp.fxlist.font
    set master.mcp.fxparm.margin master.mcp.fxlist.margin
    set master.mcp.sendlist.font master.mcp.fxlist.font
    set master.mcp.sendlist.margin master.mcp.fxlist.margin

    ResetDrawPos

    ;if Sidebar off & Mixer visible
    freezeDrawOn
        set draw_freeze !sidebar_on mcp_mst_fx_space>0 mcp_mst_fx_space<200 0
        incDrawPosY ext_h
    freezeDrawOff
    
    ;-------------------------- 
    ;   ExtMixer (Sidebar)
    
    ;if Sidebar On
    freezeDrawOn
        set draw_freeze ?sidebar_on 0

        ; position
        setDrawPos mst_w border.neg{idx}
    
        ; store position
        set sidebar_x gfx_x
        set sidebar_y gfx_y
        ; width
        set ext_w - master.mcp.size{0} gfx_x
        
        resetDrawPos

    freezeDrawOff

    ;-------------------------- 
    ;   FX
    
    ; double width
    set fx_w + * button.w{idx} 2 pad.1{idx}
    ; draw
    set master.mcp.fx [gfx_x gfx_y fx_w button.h{idx}]
    ; increment position
    mcpNextButton

    ;-------------------------- 
    ;   FX Bypass

    ; draw (include offset)
    set master.mcp.fxbyp [gfx_x gfx_y button.w{idx} button.h{idx}]

    front master.mcp.fxbyp
    ; increment position
    mcpNextButton

    ;-------------------------- 
    ;   Envelope

    set master.mcp.env [gfx_x gfx_y button.w{idx} button.h{idx}]

    mcpNextButton
   

    ;-------------------------- 
    ;   Menu

    set master.mcp.menubutton [gfx_x gfx_y button.w{idx} button.h{idx}]

    mcpNextLine

     ;-------------------------- 
    ;   IO

    set master.mcp.io [gfx_x gfx_y button.w{idx} button.h{idx}]
    mcpNextButton


    ;-------------------------- 
    ;   Mono

    set master.mcp.mono [gfx_x gfx_y button.w{idx} button.h{idx}]

    mcpNextButton

    ;-------------------------- 
    ;   Mute

    set master.mcp.mute [gfx_x gfx_y button.w{idx} button.h{idx}]
    mcpNextButton

    ;-------------------------- 
    ;   Solo

    set master.mcp.solo [gfx_x gfx_y button.w{idx} button.h{idx}]
    mcpNextLine

    ;--------------------------
    ;   Pan (Fader - Horizontal)


    freezeDrawOn
        set draw_freeze ?use_faders ?faders_horz 0

        resetDrawPosX

        set pan_w + * button.w{idx} 4 pad.3{idx}
        
        ; draw
        set master.mcp.pan !draw_freeze [gfx_x gfx_y pan_w button.w{idx} 0 0 0 0]
        set master.mcp.pan.fadermode !draw_freeze 0

        incDrawPosY button.h{idx}
        incDrawPosY pad.1{idx}

    ;--------------------------
    ;   Width (Fader - Horizontal)

        ; draw
        set master.mcp.width !draw_freeze [gfx_x gfx_y pan_w button.w{idx} 0 0 0 0]
        set master.mcp.width.fadermode !draw_freeze 0

        incDrawPosY button.w{idx}
        incDrawPosY pad.1{idx}

    freezeDrawOff 

    ;-------------------------- 
    ;   Store Position   
   
    set top_x gfx_x
    set top_y gfx_y

    ; position 
    resetDrawPosX
    set gfx_y - master.mcp.size{1} pad.b{idx}

    set bottom_x gfx_x
    set bottom_y gfx_y
    
    ;-------------------------- 
    ;   Meter

    ; set draw position
    setDrawOrigin top_x top_y

    ; width
    set meter_w + * button.w{idx} 3 pad.2{idx}

    ; height
    set meter_h - bottom_y gfx_y
    set meter_h + volume_set.h.neg{idx}
    
    ; draw
    set master.mcp.meter [gfx_x gfx_y meter_w meter_h 0 0 0 1]
    
    incDrawPosY meter_h
    
    ;-------------------------- 
    ;   Volume Label

    
    ; draw 
    set master.mcp.volume.label [gfx_x gfx_y meter_w volume_set.h{idx} 0 1 0 1]
    set master.mcp.volume.label + [label.pad{idx} label.pad{idx} label.pad.neg{idx} label.pad.neg{idx}]
    set master.mcp.volume.label.margin mcp.volume.label.margin
    set master.mcp.volume.label.font mcp.volume.label.font
    set master.mcp.volume.label.color mcp.volume.label.color
    front master.mcp.volume.label

    setDrawPosY top_y

    ;-------------------------- 
    ;   Pan (Knob)

    freezeDrawOn
        set draw_freeze !use_faders 0

        ; set position
        incDrawPosX master.mcp.meter{2}
        incDrawPosX pad.1{idx}

        ; draw
        set master.mcp.pan !draw_freeze [gfx_x gfx_y mcp.knob{idx} mcp.knob{idx}]
        set master.mcp.pan.fadermode !draw_freeze 0

        ; increment position
        incDrawPosY mcp.knob{idx}
        incDrawPosY pad.2{idx}

        ;-------------------------- 
        ;   Width (Knob)

        ; draw
        set master.mcp.width !draw_freeze [gfx_x gfx_y mcp.knob{idx} mcp.knob{idx}]
        set master.mcp.width.fadermode !draw_freeze 0

        incDrawPosY mcp.knob{idx}
        incDrawPosY pad.2{idx}

    freezeDrawOff

    ;--------------------------
    ;   Pan (Fader)

    freezeDrawOn
        set draw_freeze !faders_horz ?use_faders 0

        ; set position
        incDrawPosX master.mcp.meter{2}
        incDrawPosX pad.1{idx}

        set bot + - mcp.size{1} bottom_y pad.b{idx}
        set pan_h - - h gfx_y bot
        set pan_h * fader_split_factor

        set pan_h pan_h<mcp.knob{idx} mcp.knob{idx}

        ; draw
        set master.mcp.pan !draw_freeze [gfx_x gfx_y mcp.fader{idx} pan_h 0 0 0 0]
        

        ;if  All Fader On | width = 0
        incDrawPosY pan_h
        incDrawPosY pad.1{idx}
    
    ;--------------------------
    ;   Width (Fader)

        ; draw
        set master.mcp.width !draw_freeze [gfx_x gfx_y mcp.fader{idx} pan_h 0 0 0 0]
    
        set master.mcp.width.fadermode !draw_freeze 0

        incDrawPosY pan_h
        incDrawPosY pad.1{idx}

    freezeDrawOff   

    ;-------------------------- 
    ;   Volume

    resetDrawPosX
    incDrawPosX master.mcp.meter{2}
    incDrawPosX pad.1{idx}

    ; height
    set vol_h - bottom_y gfx_y

    ; draw
    set master.mcp.volume [gfx_x gfx_y mcp.fader{idx} vol_h 0 0 0 1]
    set master.mcp.volume.fadermode 0

    ;--------------------------
    ;   Sidebar (Draw)

    ;if Sidebar On
    freezeDrawOn
        set draw_freeze ?sidebar_on 0
        ; position
        setDrawPos sidebar_x 0
        ; height
        set ext_h - master.mcp.size{1} border{idx}
        ; draw
        set master.mcp.extmixer.position !draw_freeze [gfx_x gfx_y ext_w ext_h 0 0 0 1]

    freezeDrawOff

    ;--------------------------
    ;   Meter VU
    
    ; scales
    set master.mcp.meter.scale.color.lit.bottom meter.color.lit.bot
    set master.mcp.meter.scale.color.lit.top meter.color.lit.top
    set master.mcp.meter.scale.color.unlit.bottom meter.color.unlit.bot
    set master.mcp.meter.scale.color.unlit.top meter.color.unlit.top
    ; readout
    set master.mcp.meter.readout.color meter.color.read
    set master.mcp.meter.rmsreadout.color meter.color.rms.read
    ; vu division
    set master.mcp.meter.vu.div [meter.div{idx} 1 meter.rms.div{idx}]

    ;--------------------------
    ;   Correct Meter Overshoot

    set master.mcp.meter + [meter.pad{idx} meter.pad{idx} meter.pad.neg{idx} meter.pad.neg{idx}]
    
    ;--------------------------
    ;   Resize Elements

        set ext_max_h - - h - mcp.size{1} bottom_y master.mcp.extmixer.position{1}
        set ext_h - bottom_y master.mcp.extmixer.position{1}
        set master.mcp.extmixer.position master.mcp.extmixer.position{3}>ext_max_h [. . . ext_h . . . 1]

    ;--------------------------
    ;   Autohide Elements

    set autohide_y bottom_y
    set fader_max_h pad.mcp.fader_max_h
    
    autohideMasterMcpButton mute
    autohideMasterMcpButton solo
    autohideMasterMcpButton recmon
    autohideMasterMcpButton recarm
    autohideMasterMcpButton fx
    autohideMasterMcpButton fxbyp 
    autohideMasterMcpButton env
    autohideMasterMcpButton io
    autohideMasterMcpButton menubutton
    autohideMasterMcpButton mono
    autohideMasterMcpPanWidth pan
    autohideMasterMcpPanWidth width
    autohideMasterMcpVolume volume
    autohideMasterMcpMeter meter

endmacro

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: TRANSPORT
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

macro drawTrans scale idx
    
    ;-------------------------- 
    ;   Setup
    
    ;::: Formatting :::
    set trans_center trans_flags&1 1 0
    
    ;::: Padding :::
    set pad.l pad.trans.l
    set pad.r pad.trans.r
    set pad.t pad.trans.t
    set pad.b pad.trans.b
    set space pad.trans.space
    set center_off.0 pad.trans.center_off.0
    set center_off.1 pad.trans.center_off.1
    set pad.logo pad.trans.logo
    
    ;::: Size Limits :::
    set status.max * scale 500
    set sel.max * scale 500
    
    ;::: Scaled Width :::
    set width_scaled / w scale

    ;::: Size :::
    set trans_w_min / 550 scale
    set trans_w ?trans_docked 800 trans_w_min
    set trans.size [trans_w trans.docksize{idx}]
    set trans.size.dockedheight trans.docksize{idx}

    ;::: Docker Lines :::
    set trans.line 0
    set trans.linecount width_scaled<380 3 width_scaled<500 2 width_scaled<950 1 0
    set height_add * + trans.button.h{idx}  trans.pad.1{idx} trans.linecount
    set trans.size + [0 height_add]
    set trans.size.dockedheight + height_add

    ;-------------------------- 
    ;   Time Size Calculations


    set bpm_add pad.trans.bpm_add
    set bpm_w + trans.button.w{idx} bpm_add{idx}
    
    set sig_w + trans.button.w{idx} trans.space{idx}
    
    set rate_w + trans.button.w{idx} pad.trans.rate_add{idx}


    ;-------------------------- 
    ;   Set Drawing Origin

    set org_x / w 2
    set org_x trans.linecount==0 - . center_off.0{idx}
    set org_x trans.linecount>0 - . center_off.1{idx}
    set org_x !trans_center pad.l{idx}
    set org_x trans.linecount==1 pad.l{idx}

    ;Center Offset

    set org_x ?trans_center trans.linecount==0 ?trans_flags&4 - . / sig_w 2 
    set org_x ?trans_center trans.linecount==0 ?trans_flags&2 - . / rate_w 2 

    setDrawOrigin org_x pad.t{idx}

    ;-------------------------- 
    ;   Rewind
    
    freezeDrawOn
        set draw_freeze !trans_center 0
        incDrawPosX pad.logo{idx}
    freezeDrawOff

    set trans.rew [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transPaddingButton

    ;-------------------------- 
    ;   Forward

    set trans.fwd [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transPaddingButton

    ;-------------------------- 
    ;   Pause

    set trans.pause [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transPaddingButton

    ;-------------------------- 
    ;   Stop

    set trans.stop [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transPaddingButton

    ;-------------------------- 
    ;   Play

    set trans.play [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transPaddingButton

    ;-------------------------- 
    ;   Record

    set trans.rec [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transSpace

    ;-------------------------- 
    ;   Repeat

    set trans.repeat [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transSpace

    ;-------------------------- 
    ;   Global Automation

    set trans.automode [gfx_x gfx_y trans.button.w{idx} trans.button.h{idx}]
    transNextButton
    transSpace

    ;-------------------------- 
    ;   Line Break Formatting

    freezeDrawOn
        set draw_freeze trans.linecount>=2 0

        transNextLine
        setDrawPosX pad.l{idx}

    freezeDrawOff

    ;-------------------------------- 
    ;   Status (2 Lines)

    freezeDrawOn

        set draw_freeze trans.linecount>0 0
        set stat_w - - w gfx_x pad.r{idx}
        set trans.status !draw_freeze [gfx_x gfx_y stat_w trans.button.h{idx}]
        set trans.status.color font.coor.default

        transNextLine
        setDrawPosX pad.l{idx}

    freezeDrawOff

    ;-------------------------- 
    ;   BPM



    set trans.bpm.tap [gfx_x gfx_y bpm_w trans.button.h{idx}] 
    set trans.bpm.tap.font font.face{idx}
    set trans.bpm.tap.margin [font.margin.tap.l{idx} font.margin.tap.t{idx} font.margin.tap.r{idx} font.margin.tap.b{idx} 0]
    set trans.bpm.tap.color font.color.default

    set edit_x + gfx_x bpm_add{idx}

    set trans.bpm.edit [edit_x gfx_y bpm_add{idx} trans.button.h{idx}]
    set trans.bpm.edit.font font.face{idx}
    set trans.bpm.edit.margin [font.margin.bpm.l{idx} font.margin.bpm.t{idx} font.margin.bpm.r{idx} font.margin.bpm.b{idx} 0.5]
    set trans.bpm.edit.color font.color.default

    front trans.bpm.edit

    set trans.bpm.tap !draw_freeze + [0 0 border{idx}]
    
    incDrawPosX bpm_w

    ;-------------------------- 
    ;   Time Signature

    freezeDrawOn
        set draw_freeze ?trans_flags&4 0

        set trans.curtimesig !draw_freeze [gfx_x gfx_y sig_w trans.button.h{idx} 0 0 0 0] 
        set trans.curtimesig.font font.face{idx}
        set trans.curtimesig.color font.color.default
        set trans.curtimesig !draw_freeze + [0 0 border{idx}]
        
        incDrawPosX sig_w

    freezeDrawOff

    ;-------------------------- 
    ;   Playrate

    freezeDrawOn
        set draw_freeze ?trans_flags&2 0


        set trans.rate !draw_freeze [gfx_x gfx_y rate_w trans.button.h{idx}] 
        set trans.rate.font font.face{idx}
        set trans.rate.margin [font.margin.rate.l{idx} font.margin.rate.t{idx} font.margin.rate.r{idx} font.margin.rate.b{idx} 1]
        set trans.rate.color font.color.default

        incDrawPosX rate_w 0 space{idx}

    freezeDrawOff




    ;-------------------------- 
    ;   Center Tempo Controls

    set bpm_offset / - w gfx_x 2

    set trans.bpm.tap trans.linecount>=3 ?trans_center + [bpm_offset]
    set trans.bpm.edit trans.linecount>=3 ?trans_center + [bpm_offset]
    set trans.curtimesig trans.linecount>=3 ?trans_center + [bpm_offset]
    set trans.rate trans.linecount>=3 ?trans_center + [bpm_offset]

    ;-------------------------- 
    ;   Line Break

    ;if  Linecount = 1
    freezeDrawOn
        set draw_freeze trans.linecount==0 0

        transSpace

    freezeDrawOff



    ;-------------------------- 
    ;   Status (1 Line)

    freezeDrawOn
        set draw_freeze trans.linecount==0 0

        set stat_w + pad.2.neg{idx} - w gfx_x
        set stat_w stat_w>status.max status.max

        set stat_w !trans_center * trans.button.w{idx} 6
        
        set stat_off !trans_center unit.8{idx} unit.2{idx}

        set trans.status !draw_freeze [gfx_x gfx_y stat_w trans.button.h{idx}]

        set trans.status.margin  [font.margin.status.l{idx} font.margin.status.t{idx} font.margin.status.r{idx} font.margin.status.b{idx}]

    freezeDrawOff


    ;-------------------------- 
    ;   Line Break
    
    ;if  Linecount = 4
    freezeDrawOn
        set draw_freeze trans.linecount>=3 0

        transNextLine
        setDrawPosX pad.l{idx}    

    freezeDrawOff


    ;-------------------------- 
    ;   Store Last Position
    
    set last_x gfx_x

    ;-------------------------- 
    ;   Selection

    setDrawPosX pad.l{idx}

    set sel_x - trans.rew{0} trans.space{idx}

    set sel_w - sel_x gfx_x

    set gfx_x sel_w>sel.max - sel_x sel.max

    set sel_w - sel_x gfx_x

    ;if non-centered OR line count > 0
    freezeDrawOn
        set draw_freeze !trans_center 0
        set draw_freeze trans.linecount>0 0

        set sel_x + trans.status{0} trans.status{2}
        set sel_x trans.linecount>0 last_x

        setDrawPosX sel_x
        
        set gfx_x !draw_freeze trans.linecount<3 + trans.space{idx}

        set sel_w !draw_freeze * trans.button.w{idx} 12;

        set pos_x_fin + + gfx_x sel_w pad.r{idx}
        set sel_w !draw_freeze pos_x_fin>w - - w gfx_x pad.r{idx}
        set sel_w !draw_freeze trans.linecount>0 - - w gfx_x pad.r{idx}

    freezeDrawOff

    ; draw
    set trans.sel [gfx_x gfx_y sel_w trans.button.h{idx}]
    set trans.sel.font font.face{idx}
    set trans.sel.color [2 0 0 0 1]
    set trans.sel.color font.color.default
    set trans.sel.margin [font.margin.select.l{idx} font.margin.select.t{idx} font.margin.select.r{idx} font.margin.select.b{idx} 0}

endmacro

;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~
;       DRAW: DPI TRANSLATION AND DRAWING
;~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~-.-~

;-------------------------- 
;   Clear Data

clear envcp.*
clear tcp.*
clear mcp.*
clear trans.*
clear master.*

