desc:MIDI-triggered velocity-sensitive audio/CC flexible DADSR envelope

/*
Zenvelope v1.1
by dwelx (dwelxx@gmail.com)
28-12-2014, Karelia, Russia
for REAPER v4.60+
*/

// based on Zenvelib v1 by dwelx
import dwelx.zenvelib.v1.jsfx-inc

slider1:0<0,5000,1>Delay (ms)
slider2:500<1,5000,1>Attack (ms)
slider3:2000<1,5000,1>Decay (ms)
slider4:-4<-60,0,1>Sustain (dB)
slider5:3000<1,10000,1>Release (ms)
slider10:-80<-99,99,1>Attack shape
slider11:90<-99,99,1>Decay shape
slider12:90<-99,99,1>Release shape
slider15:100<0,100,1>Intensity (%)
slider16:0<0,100,1>Bottom clamp (%)
slider17:100<0,100,1>Top clamp (%)
slider20:0<0,2,1{-,+,inv}>Velocity-sensitive: delay
slider21:0<0,2,1{-,+,inv}>attack
slider22:0<0,2,1{-,+,inv}>decay
slider23:0<0,2,1{-,+,inv}>sustain
slider24:0<0,2,1{-,+,inv}>release
slider25:1<0,2,1{-,+,inv}>intensity
slider29:1<0,1,1{off,on}>Retrigger envelope
slider30:2<0,2,1{off,all,all but trigger channel}>Passthrough source MIDI
slider31:0<0,17,1{any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Trigger MIDI channel
slider40:0<0,128,1{off,0 Bank Select MSB,1 Mod Wheel MSB,2 Breath MSB,3,4 Foot Pedal MSB,5 Portamento MSB,6 Data Entry MSB,7 Volume MSB,8 Balance MSB,9,10 Pan Position MSB,11 Expression MSB,12 Control 1 MSB,13 Control 2 MSB,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Select LSB,33 Mod Wheel LSB,34 Breath LSB,35,36 Foot Pedal LSB,37 Portamento LSB,38 Data Entry LSB,39 Volume LSB,40 Balance LSB,41,42 Pan Position LSB,43 Expression LSB,44 Control 1 LSB,45 Control 2 LSB,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold Pedal (on/off),65 Portamento (on/off),66 Sostenuto (on/off),67 Soft Pedal (on/off),68 Legato Pedal (on/off),69 Hold 2 Pedal (on/off),70 Sound Variation,71 Timbre/Resonance,72 Sound Release,73 Sound Attack,74 Brightness/Cutoff,75 Sound Control 6,76 Sound Control 7,77 Sound Control 8,78 Sound Control 9,79 Sound Control 10,80 GP Button 1 (on/off),81 GP Button 2 (on/off),82 GP Button 3 (on/off),83 GP Button 4 (on/off),84,85,86,87,88,89,90,91 Effects Level,92 Tremolo Level,93 Chorus Level,94 Celeste Level,95 Phaser Level,96 Data Button Inc,97 Data Button Dec,98 Non-Reg Parm LSB,99 Non-Reg Parm MSB,100 Reg Parm LSB,101 Reg Parm MSB,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>Map envelope to CC
slider41:0<0,128,1{off,0 Bank Select MSB,1 Mod Wheel MSB,2 Breath MSB,3,4 Foot Pedal MSB,5 Portamento MSB,6 Data Entry MSB,7 Volume MSB,8 Balance MSB,9,10 Pan Position MSB,11 Expression MSB,12 Control 1 MSB,13 Control 2 MSB,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Select LSB,33 Mod Wheel LSB,34 Breath LSB,35,36 Foot Pedal LSB,37 Portamento LSB,38 Data Entry LSB,39 Volume LSB,40 Balance LSB,41,42 Pan Position LSB,43 Expression LSB,44 Control 1 LSB,45 Control 2 LSB,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold Pedal (on/off),65 Portamento (on/off),66 Sostenuto (on/off),67 Soft Pedal (on/off),68 Legato Pedal (on/off),69 Hold 2 Pedal (on/off),70 Sound Variation,71 Timbre/Resonance,72 Sound Release,73 Sound Attack,74 Brightness/Cutoff,75 Sound Control 6,76 Sound Control 7,77 Sound Control 8,78 Sound Control 9,79 Sound Control 10,80 GP Button 1 (on/off),81 GP Button 2 (on/off),82 GP Button 3 (on/off),83 GP Button 4 (on/off),84,85,86,87,88,89,90,91 Effects Level,92 Tremolo Level,93 Chorus Level,94 Celeste Level,95 Phaser Level,96 Data Button Inc,97 Data Button Dec,98 Non-Reg Parm LSB,99 Non-Reg Parm MSB,100 Reg Parm LSB,101 Reg Parm MSB,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>Map velocity to CC
slider42:0<0,3,1{off,intensity only,clamp only,both}>Mapped velocity follows intensity and clamp
slider43:0<0,17,1{same as for trigger,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>CC MIDI channel
slider60:0<0,1>Assign this to any Parameter Modulation

@init
// declare refresh function with modifying coefficients
function refresh(_delayC,_attackC,_decayC,_sustainC,_releaseC,_attackSC,_decaySC,_releaseSC,_intensityC,_clampbC,_clamptC) (
  // normalize shape ratios for library
  slider10 < 0 ? attackS = (200 + slider10) / 100 - 1 : attackS = (100 - slider10) / 100 + 1;
  slider11 < 0 ? decayS = (200 + slider11) / 100 : decayS = (100 - slider11) / 100;
  slider12 < 0 ? releaseS = (200 + slider12) / 100 : releaseS = (100 - slider12) / 100;

  // use very high ratio for almost linear shape (if any slider is zero)
  attackS == 2 ? attackS = 10000 : attackS *= _attackSC;
  decayS == 1 ? decayS = 10000 : decayS *= _decaySC;
  releaseS == 1 ? releaseS = 10000 : releaseS *= _releaseSC;

  // update envelope values
  plugin.zen_update(slider1*_delayC,slider2*_attackC,slider3*_decayC,slider4-_sustainC,slider5*_releaseC,attackS,decayS,releaseS,slider15*_intensityC,slider16*_clampbC,slider17*_clamptC);
  plugin.zen_gfxUpdate(460,110);  // update graphical values and coordinates
);



// this will set initial envelope variables or update them if sliders changed
@slider
refresh(1,1,1,0,1,1,1,1,1,1,1);



// graphical routines
@gfx 460 110
plugin.zen_gfxDraw();
gfx_setfont(1, 0, 12); gfx_x = 393; gfx_y = 0; gfx_drawstr("Zenvelope v1.1");



// this will run every sample
@sample
env = plugin.zen_process();  // main processing function
spl0 *= env;
spl1 *= env;
slider60 = env;  // slider for parameter modulation



// MIDI routines
@block
while (midirecv(offset, msg1, msg2, msg3)) (
  event = msg1 & 0xF0;  // apply mask to determine event
  channel = msg1 & 0x0F;  // apply mask to determine channel
  vel = msg3;
  
  slider31 ? channelt = slider31 - 1 : channelt = channel;   // user-defined trigger channel, if not - use any
  slider43 ? channelc = slider43 - 1 : channelc = channelt;  // same for CC channel
  
  // note on and channel is right
  event == 0x90 && vel > 0 && channel == channelt ? (
    velo = vel - 1;  // normalize velocity, so zero value becomes effective
    
    // invert velocity of sensitivity if user wants
    slider20 > 1 ? velp = 126 - velo : velp = velo;
    slider21 > 1 ? vela = 126 - velo : vela = velo;
    slider22 > 1 ? veld = 126 - velo : veld = velo;
    slider23 > 1 ? vels = 126 - velo : vels = velo;
    slider24 > 1 ? velr = 126 - velo : velr = velo;
    slider25 > 1 ? veli = 126 - velo : veli = velo;
    
    // velocity-sensitive if user wants  
    slider20 ? sensp = 1 - velp / 126 : sensp = 1;
    slider21 ? sensa = 1 - vela / 126 : sensa = 1;
    slider22 ? sensd = 1 - veld / 126 : sensd = 1;
    slider23 ? senss = (1 - vels / 126) * 12 : senss = 0;
    slider24 ? sensr = 1 - velr / 126 : sensr = 1;
    slider25 ? sensi = veli / 126 : sensi = 1;
    
    // if any velocity-sensitivity is set
    slider20 || slider21 || slider22 || slider23 || slider24 || slider25 ? (
      refresh(sensp,sensa,sensd,senss,sensr,1,1,1,sensi,1,1);
    );  // update envelope variables with sensitivity information
    
    // (re)trigger envelope
    plugin.zen_trigger(slider29);

    // map velocity to CC
    slider41 ? (
      slider42 == 1 ? velo = velo * slider15 / 100;  // follows intensity only?
      slider42 == 2 ? velo = 126 * slider16 / 100 + velo * (slider17 - slider16) / 100;  // follows clamp only?
      slider42 == 3 ? velo = 126 * slider16 / 100 + velo * (slider15 * (slider17 - slider16)) / 10000; // both?
      velo = ceil(velo) + 1;  // normalize back velocity for sending
      midisend(0, 0xB0 + channelc, slider41 - 1, velo);
    );
  );
  
  //note off
  ((event == 0x90 && vel == 0) || event == 0x80) && channel == channelt ? ( // can be also note on with zero velocity
    plugin.zen_release();  // release envelope
  );

  // passthrough
  slider30 == 1 ? midisend(offset, msg1, msg2, msg3); // all
  slider30 == 2 ? channel != channelt ? midisend(offset, msg1, msg2, msg3); // all but trigger channel
);

// map envelope to CC
slider40 ? (
  (cc = floor(env * 127)) != cclast ? (  // suppress redundant CC messages
    cclast = cc;
    midisend(0, 0xB0 + channelc, slider40 - 1, cc);
  );
);
