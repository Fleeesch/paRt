desc: dwelx.zenvelib.v1.jsfx-inc
@init

/*
Zenvelib v1.1
by dwelx (dwelxx@gmail.com)
28-12-2014, Karelia, Russia
for REAPER v4.60+
-----------------------------------
Library for triggered Delay-Attack-Decay-Sustain-Release
envelope with shape, clamp and intensity control.
Also includes graphical representation support.
*/

/////////////////////
// Shape functions //
/////////////////////

// main equation for exponential coefficients and base values
function zen_calc(_targetB1,_targetB2,_targetC,_rate,_ratio,_mult1,_mult2)
 instance (b,c) (
	_ratio > 1 ? (											// slow-start shape
		_ratio = _mult1 * (_ratio - 1);
		c = exp(log((_targetC + _ratio) / _ratio) / _rate);
		b = (_targetB1 - _mult2 * _ratio) * (1 - c);
	) : (													// fast-start shape (inverse exponential)
		_ratio = _mult1 * _ratio;
		c = exp(-log((_targetC + _ratio) / _ratio) / _rate);
		b = (_targetB2 + _mult2 * _ratio) * (1 - c);
	);
);



////////////////////////
// Envelope functions //
////////////////////////

// set or update envelope variables
function zen_update(_delay,_attack,_decay,_sustain,_release,_attackS,_decayS,_releaseS,_intensity,_clampb,_clampt)
 instance(delay,attack,decay,sustain,release,intensity,clampb,clampt,clamp,mysrate) (
	// seems that REAPER doesn't care about samplerate when plugin is not record-armed - we care
	srate ? mysrate = srate : mysrate = 44100;	// assume default if not reported
 
	// convert ms to samples, dB and % to ratios and normalize values
	delay = min(max(_delay, 0) * 0.001, 60) * mysrate;
	attack = min(max(_attack, 1) * 0.001, 60) * mysrate;
	decay = min(max(_decay, 1) * 0.001, 60) * mysrate;
	sustain = 10 ^ (min(max(_sustain, -90), 0) / 20);
	release = min(max(_release, 1) * 0.001, 60) * mysrate;
	
	// for intensity and clamp
	intensity = min(max(_intensity, 0) * 0.01, 1);
	clampb = min(max(_clampb, 0) * 0.01, 1);
	clampt = min(max(_clampt, 0) * 0.01, 1);
	clamp = clampt - clampb;
	
	// for shape ratios
	attack.s = min(max(_attackS, 0.001), 10000);
	decay.s = min(max(_decayS, 0.001), 10000);
	release.s = min(max(_releaseS, 0.001), 10000);

	// calculate envelope shape values
	attack.env.zen_calc(0,1,1,attack,attack.s,1,1);
	decay.env.zen_calc(1,sustain,1 - sustain,decay,decay.s,1,-1);
);


// (re)trigger envelope
function zen_trigger(_retrig)
 instance (state,delay,trig,d1,d2,env,gfxOrbX,gfxOrbY) (
	trig += 1;				// increase trigger count
	_retrig ? (				// retriggering enabled?
		!state ? (			// not triggered already?
			d1 = 0;
			state = 1;		// activate initial delay countdown
		) : (				// else
			d2 = delay + 1;	// activate retrigger
		);
	) : (					// retriggering disabled?
		gfxOrbX = 0; gfxOrbY = 0;	//reset moving orb
		d1 = 0;
		env = 0;			// reset envelope
		state = 1;
	);
);


// release envelope
function zen_release()
 instance (state,trig,d2,sustain,release,env,gfxOrbY,gfxBandY,gfxSustain) (
	!(trig = max(trig - 1, 0)) ? (	// all keys depressed? (also protect from single note off events)
		d2 = 0;						// reset retrigger counter
		release.env.zen_calc(max(env, sustain),0,max(env, sustain),release,release.s,1,-1);	// calculate envelope release shape from this point
		release.orb.zen_calc(max(gfxOrbY, gfxSustain),0,max(gfxOrbY, gfxSustain),release,release.s,gfxBandY,-1);	// calculate moving orb release shape from this point
		state = 5;					// activate release
	) : (							// some keys pressed?
		trig == 1 ? d2 = 0;			// if only one - reset retrigger counter
	);
);



///////////////////////
// Graphic functions //
///////////////////////

// set or update graphic variables
function zen_gfxUpdate(_gfxBandX,_gfxBandY)
 instance(delay,attack,decay,sustain,release,
			gfxBandY,gfxBandSum,gfxBandP,gfxBandA,gfxBandD,gfxBandR,gfxSustain,gfxOrbR) (
	// calculate bands' sizes in pixels
	gfxBandY = _gfxBandY;
	gfxBandSum = (delay + attack + decay + release) / _gfxBandX;
	gfxBandP = floor(delay / gfxBandSum);
	gfxBandA = floor(attack / gfxBandSum);
	gfxBandD = floor(decay / gfxBandSum);
	gfxBandR = floor(release / gfxBandSum);
	gfxSustain = sustain * gfxBandY;
	gfxOrbR = _gfxBandY * 0.04;	// moving orb radius
	
	// calculate envelope overlay shape values
	attack.ovr.zen_calc(0,gfxBandY,gfxBandY,gfxBandA,attack.s,gfxBandY,1);
	decay.ovr.zen_calc(gfxBandY,gfxSustain,gfxBandY - gfxSustain,gfxBandD,decay.s,gfxBandY,-1);
	release.ovr.zen_calc(gfxSustain,0,gfxSustain,gfxBandR,release.s,gfxBandY,-1);
	
	// and moving orb shape values
	attack.orb.zen_calc(0,gfxBandY,gfxBandY,attack,attack.s,gfxBandY,1);
	decay.orb.zen_calc(gfxBandY,gfxSustain,gfxBandY - gfxSustain,decay,decay.s,gfxBandY,-1);
);


// overlay draw lines subroutine
function zen_gfxDrawBand(_targetX,_y,_targetY,_b,_c)
 instance (gfxBandX,gfxBandY) (
	_targetX += gfxBandX;
	while (gfxBandX < _targetX) (	// draw up to full band
		_y = _b + _y * _c;
		gfx_line(gfxBandX, gfxBandY, gfxBandX, gfxBandY - max(_y,_targetY),1);
		gfxBandX += 1;
	);
);


// main graphic routine (must be in @gfx section)
function zen_gfxDraw()
 instance(state,d2,delay,attack,decay,release,
			gfxBandX,gfxBandY,gfxBandP,gfxBandA,gfxBandD,gfxBandR,
			gfxSustain,gfxOrbX,gfxOrbY,gfxOrbR,zen_gfxDrawBand) (
	// draw overlay
	gfx_r = 0.5; gfx_g = 0; gfx_b = 0;
	zen_gfxDrawBand(gfxBandP,0,0,0,0);										// delay
	zen_gfxDrawBand(gfxBandA,0,0,attack.ovr.b,attack.ovr.c);				// attack
	zen_gfxDrawBand(gfxBandD,gfxBandY,gfxSustain,decay.ovr.b,decay.ovr.c);	// decay+sustain
	zen_gfxDrawBand(gfxBandR,gfxSustain,0,release.ovr.b,release.ovr.c);		// release
	gfxBandX = 0;

	// draw moving orb
	gfx_r = 1 * env + 0.5; gfx_g = gfx_r; gfx_b = 1 - env;
	state == 1 ? gfx_circle(gfxOrbX, gfxBandY - gfxOrbY, gfxOrbR, 0, 1);							// delay
	state == 2 || state == 3 || state == 5 ? gfx_circle(gfxOrbX, gfxBandY - gfxOrbY, gfxOrbR, 1, 1);// attack,decay,release
	state == 4 ? gfx_circle(gfxOrbX, gfxBandY - gfxOrbY, gfxOrbR * 2.5, 1, 1);						// sustain
	d2 ? (gfx_circle((1 - d2 / delay) * gfxBandP, gfxBandY, gfxOrbR, 0, 1));						// secondary delay (retrigger)
);



//////////////////
// Main Process //
//////////////////

// emerge envelope and moving orb
function zen_process()
 instance (delay,attack,decay,sustain,release,intensity,clampb,clamp,state,d1,d2,env,
			gfxBandY,gfxBandP,gfxBandA,gfxBandD,gfxBandR,gfxSustain,gfxOrbX,gfxOrbY) (
	d2 ? (								// retrigger?
		(d2 -= 1) < 1 ? (				// activate attack after secondary delay (if any)
			gfxOrbX = gfxBandP;
			gfxOrbY = 0;
			while (gfxOrbY < gfxBandY * env) (	// equalize moving orb coordinates for new cycle
				gfxOrbY = attack.orb.b + gfxOrbY * attack.orb.c;
				gfxOrbX += gfxBandA / attack;
			);
			d2 = 0;	// reset retrigger
			state = 2;
		);
	);

	state == 1 ? (						// initial delay
		gfxOrbX += gfxBandP / delay;
		(d1 += 1) >= delay ? (
			gfxOrbX = gfxBandP;
			state = 2;
		);
	);

	state == 2 ? (						// attack
		gfxOrbX += gfxBandA / attack;
		gfxOrbY = attack.orb.b + gfxOrbY * attack.orb.c;
		env = attack.env.b + env * attack.env.c;
		env >= 1 ? (
			gfxOrbX = gfxBandP + gfxBandA;
			gfxOrbY = gfxBandY;
			env = 1;
			state = 3;
		);
	);

	state == 3 ? (						// decay
		gfxOrbX += gfxBandD  / decay;
		gfxOrbY = decay.orb.b + gfxOrbY * decay.orb.c;
		env = decay.env.b + env * decay.env.c;
		env <= sustain ? (
			gfxOrbX = gfxBandP + gfxBandA + gfxBandD;
			gfxOrbY = gfxSustain;
			env = sustain;
			state = 4;
		);
	);

	state == 4 ? (						// sustain
		gfxOrbX = gfxBandP + gfxBandA + gfxBandD;
		gfxOrbY = gfxSustain;
		env = sustain;
	);

	state == 5 ? (						// release
		gfxOrbX += gfxBandR  / release;
		gfxOrbY = release.orb.b + gfxOrbY * release.orb.c;
		env = release.env.b + env * release.env.c;
		env <= 0 ? (
			gfxOrbX = 0;
			gfxOrbY = 0;
			env = 0;
			state = 0;
		);
	);
  
	clampb + env * intensity * clamp;	// apply intensity and clamp then return function value (volume ratio)
);
